// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/csiclient (interfaces: CSIClient)

// Package mock_csiclient is a generated GoMock package.
package mock_csiclient

import (
	context "context"
	reflect "reflect"

	csiclient "github.com/aws/amazon-ecs-agent/ecs-agent/csiclient"
	csi "github.com/container-storage-interface/spec/lib/go/csi"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockCSIClient is a mock of CSIClient interface.
type MockCSIClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSIClientMockRecorder
}

// MockCSIClientMockRecorder is the mock recorder for MockCSIClient.
type MockCSIClientMockRecorder struct {
	mock *MockCSIClient
}

// NewMockCSIClient creates a new mock instance.
func NewMockCSIClient(ctrl *gomock.Controller) *MockCSIClient {
	mock := &MockCSIClient{ctrl: ctrl}
	mock.recorder = &MockCSIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSIClient) EXPECT() *MockCSIClientMockRecorder {
	return m.recorder
}

// GetVolumeMetrics mocks base method.
func (m *MockCSIClient) GetVolumeMetrics(arg0 context.Context, arg1, arg2 string) (*csiclient.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeMetrics", arg0, arg1, arg2)
	ret0, _ := ret[0].(*csiclient.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeMetrics indicates an expected call of GetVolumeMetrics.
func (mr *MockCSIClientMockRecorder) GetVolumeMetrics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeMetrics", reflect.TypeOf((*MockCSIClient)(nil).GetVolumeMetrics), arg0, arg1, arg2)
}

// NodeGetCapabilities mocks base method.
func (m *MockCSIClient) NodeGetCapabilities(arg0 context.Context) (*csi.NodeGetCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetCapabilities", arg0)
	ret0, _ := ret[0].(*csi.NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetCapabilities indicates an expected call of NodeGetCapabilities.
func (mr *MockCSIClientMockRecorder) NodeGetCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetCapabilities", reflect.TypeOf((*MockCSIClient)(nil).NodeGetCapabilities), arg0)
}

// NodeStageVolume mocks base method.
func (m *MockCSIClient) NodeStageVolume(arg0 context.Context, arg1 string, arg2 map[string]string, arg3, arg4 string, arg5 v1.PersistentVolumeAccessMode, arg6, arg7 map[string]string, arg8 []string, arg9 *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStageVolume", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeStageVolume indicates an expected call of NodeStageVolume.
func (mr *MockCSIClientMockRecorder) NodeStageVolume(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStageVolume", reflect.TypeOf((*MockCSIClient)(nil).NodeStageVolume), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// NodeUnstageVolume mocks base method.
func (m *MockCSIClient) NodeUnstageVolume(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUnstageVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeUnstageVolume indicates an expected call of NodeUnstageVolume.
func (mr *MockCSIClientMockRecorder) NodeUnstageVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnstageVolume", reflect.TypeOf((*MockCSIClient)(nil).NodeUnstageVolume), arg0, arg1, arg2)
}
