// Code generated by smithy-go-codegen DO NOT EDIT.


package acs

import (
	"bytes"
	"context"
	"fmt"
	"github.com/aws/smithy-go/encoding/httpbinding"
	"math"
	"github.com/aws/smithy-go/middleware"
	"path"
	smithy "github.com/aws/smithy-go"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	smithyjson "github.com/aws/smithy-go/encoding/json"
	"github.com/aws/smithy-go/tracing"
	"github.com/aws/aws-sdk-go-v2/service/acs/types"
)

type awsAwsjson11_serializeOpAttachInstanceNetworkInterfaces struct {
}

func (*awsAwsjson11_serializeOpAttachInstanceNetworkInterfaces) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpAttachInstanceNetworkInterfaces) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*AttachInstanceNetworkInterfacesInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.AttachInstanceNetworkInterfaces")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentAttachInstanceNetworkInterfacesInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpAttachTaskNetworkInterfaces struct {
}

func (*awsAwsjson11_serializeOpAttachTaskNetworkInterfaces) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpAttachTaskNetworkInterfaces) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*AttachTaskNetworkInterfacesInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.AttachTaskNetworkInterfaces")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentAttachTaskNetworkInterfacesInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpConfirmAttachment struct {
}

func (*awsAwsjson11_serializeOpConfirmAttachment) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpConfirmAttachment) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*ConfirmAttachmentInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.ConfirmAttachment")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentConfirmAttachmentInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpError struct {
}

func (*awsAwsjson11_serializeOpError) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpError) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*ErrorInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.Error")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentErrorInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpHeartbeat struct {
}

func (*awsAwsjson11_serializeOpHeartbeat) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpHeartbeat) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*HeartbeatInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.Heartbeat")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentHeartbeatInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPayload struct {
}

func (*awsAwsjson11_serializeOpPayload) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPayload) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PayloadInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.Payload")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPayloadInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPerformUpdate struct {
}

func (*awsAwsjson11_serializeOpPerformUpdate) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPerformUpdate) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PerformUpdateInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.PerformUpdate")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPerformUpdateInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPoll struct {
}

func (*awsAwsjson11_serializeOpPoll) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPoll) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PollInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.Poll")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPollInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpRefreshTaskIAMRoleCredentials struct {
}

func (*awsAwsjson11_serializeOpRefreshTaskIAMRoleCredentials) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpRefreshTaskIAMRoleCredentials) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*RefreshTaskIAMRoleCredentialsInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.RefreshTaskIAMRoleCredentials")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentRefreshTaskIAMRoleCredentialsInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpStageUpdate struct {
}

func (*awsAwsjson11_serializeOpStageUpdate) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpStageUpdate) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*StageUpdateInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.StageUpdate")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentStageUpdateInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpTaskManifest struct {
}

func (*awsAwsjson11_serializeOpTaskManifest) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpTaskManifest) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*TaskManifestInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.TaskManifest")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentTaskManifestInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpTaskStopVerification struct {
}

func (*awsAwsjson11_serializeOpTaskStopVerification) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpTaskStopVerification) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*TaskStopVerificationInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.TaskStopVerification")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentTaskStopVerificationInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpUpdateFailure struct {
}

func (*awsAwsjson11_serializeOpUpdateFailure) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpUpdateFailure) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*UpdateFailureInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerAgentServiceV20141113.UpdateFailure")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentUpdateFailureInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
func awsAwsjson11_serializeDocumentASMAuthData(v *types.ASMAuthData, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.CredentialsParameter != nil {
		ok := object.Key("credentialsParameter")
		ok.String(*v.CredentialsParameter)
	}
	
	if v.Region != nil {
		ok := object.Key("region")
		ok.String(*v.Region)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentAssociation(v *types.Association, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Containers != nil {
		ok := object.Key("containers")
		if err := awsAwsjson11_serializeDocumentStringList(v.Containers, ok); err != nil {
			return err
		}
	}
	
	if v.Content != nil {
		ok := object.Key("content")
		if err := awsAwsjson11_serializeDocumentEncodedString(v.Content, ok); err != nil {
			return err
		}
	}
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentAssociations(v []types.Association, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentAssociation(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentAttachment(v *types.Attachment, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AttachmentArn != nil {
		ok := object.Key("attachmentArn")
		ok.String(*v.AttachmentArn)
	}
	
	if v.AttachmentProperties != nil {
		ok := object.Key("attachmentProperties")
		if err := awsAwsjson11_serializeDocumentAttachmentPropertyList(v.AttachmentProperties, ok); err != nil {
			return err
		}
	}
	
	if v.AttachmentType != nil {
		ok := object.Key("attachmentType")
		ok.String(*v.AttachmentType)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentAttachmentList(v []types.Attachment, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentAttachment(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentAttachmentProperty(v *types.AttachmentProperty, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if v.Value != nil {
		ok := object.Key("value")
		ok.String(*v.Value)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentAttachmentPropertyList(v []types.AttachmentProperty, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentAttachmentProperty(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentContainer(v *types.Container, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Command != nil {
		ok := object.Key("command")
		if err := awsAwsjson11_serializeDocumentStringList(v.Command, ok); err != nil {
			return err
		}
	}
	
	if v.ContainerArn != nil {
		ok := object.Key("containerArn")
		ok.String(*v.ContainerArn)
	}
	
	if v.Cpu != nil {
		ok := object.Key("cpu")
		ok.Integer(*v.Cpu)
	}
	
	if v.CredentialSpecs != nil {
		ok := object.Key("credentialSpecs")
		if err := awsAwsjson11_serializeDocumentStringList(v.CredentialSpecs, ok); err != nil {
			return err
		}
	}
	
	if v.DependsOn != nil {
		ok := object.Key("dependsOn")
		if err := awsAwsjson11_serializeDocumentContainerDependencies(v.DependsOn, ok); err != nil {
			return err
		}
	}
	
	if v.DockerConfig != nil {
		ok := object.Key("dockerConfig")
		if err := awsAwsjson11_serializeDocumentDockerConfig(v.DockerConfig, ok); err != nil {
			return err
		}
	}
	
	if v.EntryPoint != nil {
		ok := object.Key("entryPoint")
		if err := awsAwsjson11_serializeDocumentStringList(v.EntryPoint, ok); err != nil {
			return err
		}
	}
	
	if v.Environment != nil {
		ok := object.Key("environment")
		if err := awsAwsjson11_serializeDocumentEnvironmentVariables(v.Environment, ok); err != nil {
			return err
		}
	}
	
	if v.EnvironmentFiles != nil {
		ok := object.Key("environmentFiles")
		if err := awsAwsjson11_serializeDocumentEnvironmentFiles(v.EnvironmentFiles, ok); err != nil {
			return err
		}
	}
	
	if v.Essential != nil {
		ok := object.Key("essential")
		ok.Boolean(*v.Essential)
	}
	
	if v.FirelensConfiguration != nil {
		ok := object.Key("firelensConfiguration")
		if err := awsAwsjson11_serializeDocumentFirelensConfiguration(v.FirelensConfiguration, ok); err != nil {
			return err
		}
	}
	
	if len(v.HealthCheckType) > 0 {
		ok := object.Key("healthCheckType")
		ok.String(string(v.HealthCheckType))
	}
	
	if v.Image != nil {
		ok := object.Key("image")
		ok.String(*v.Image)
	}
	
	if v.Links != nil {
		ok := object.Key("links")
		if err := awsAwsjson11_serializeDocumentStringList(v.Links, ok); err != nil {
			return err
		}
	}
	
	if len(v.LogsAuthStrategy) > 0 {
		ok := object.Key("logsAuthStrategy")
		ok.String(string(v.LogsAuthStrategy))
	}
	
	if v.ManagedAgents != nil {
		ok := object.Key("managedAgents")
		if err := awsAwsjson11_serializeDocumentManagedAgentList(v.ManagedAgents, ok); err != nil {
			return err
		}
	}
	
	if v.Memory != nil {
		ok := object.Key("memory")
		ok.Integer(*v.Memory)
	}
	
	if v.MountPoints != nil {
		ok := object.Key("mountPoints")
		if err := awsAwsjson11_serializeDocumentMountPointList(v.MountPoints, ok); err != nil {
			return err
		}
	}
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if v.NetworkInterfaceNames != nil {
		ok := object.Key("networkInterfaceNames")
		if err := awsAwsjson11_serializeDocumentStringList(v.NetworkInterfaceNames, ok); err != nil {
			return err
		}
	}
	
	if v.Overrides != nil {
		ok := object.Key("overrides")
		ok.String(*v.Overrides)
	}
	
	if v.PortMappings != nil {
		ok := object.Key("portMappings")
		if err := awsAwsjson11_serializeDocumentPortMappingList(v.PortMappings, ok); err != nil {
			return err
		}
	}
	
	if v.RegistryAuthentication != nil {
		ok := object.Key("registryAuthentication")
		if err := awsAwsjson11_serializeDocumentRegistryAuthenticationData(v.RegistryAuthentication, ok); err != nil {
			return err
		}
	}
	
	if v.RestartPolicy != nil {
		ok := object.Key("restartPolicy")
		if err := awsAwsjson11_serializeDocumentRestartPolicy(v.RestartPolicy, ok); err != nil {
			return err
		}
	}
	
	if v.Secrets != nil {
		ok := object.Key("secrets")
		if err := awsAwsjson11_serializeDocumentSecretList(v.Secrets, ok); err != nil {
			return err
		}
	}
	
	if v.StartTimeout != nil {
		ok := object.Key("startTimeout")
		ok.Integer(*v.StartTimeout)
	}
	
	if v.StopTimeout != nil {
		ok := object.Key("stopTimeout")
		ok.Integer(*v.StopTimeout)
	}
	
	if v.VolumesFrom != nil {
		ok := object.Key("volumesFrom")
		if err := awsAwsjson11_serializeDocumentVolumeFromList(v.VolumesFrom, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentContainerDependencies(v []types.ContainerDependency, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentContainerDependency(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentContainerDependency(v *types.ContainerDependency, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if len(v.Condition) > 0 {
		ok := object.Key("condition")
		ok.String(string(v.Condition))
	}
	
	if v.ContainerName != nil {
		ok := object.Key("containerName")
		ok.String(*v.ContainerName)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentContainerList(v []types.Container, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentContainer(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentDockerConfig(v *types.DockerConfig, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Config != nil {
		ok := object.Key("config")
		ok.String(*v.Config)
	}
	
	if v.HostConfig != nil {
		ok := object.Key("hostConfig")
		ok.String(*v.HostConfig)
	}
	
	if v.Version != nil {
		ok := object.Key("version")
		ok.String(*v.Version)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentDockerVolumeConfiguration(v *types.DockerVolumeConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Autoprovision != nil {
		ok := object.Key("autoprovision")
		ok.Boolean(*v.Autoprovision)
	}
	
	if v.Driver != nil {
		ok := object.Key("driver")
		ok.String(*v.Driver)
	}
	
	if v.DriverOpts != nil {
		ok := object.Key("driverOpts")
		if err := awsAwsjson11_serializeDocumentStringMap(v.DriverOpts, ok); err != nil {
			return err
		}
	}
	
	if v.Labels != nil {
		ok := object.Key("labels")
		if err := awsAwsjson11_serializeDocumentStringMap(v.Labels, ok); err != nil {
			return err
		}
	}
	
	if len(v.Scope) > 0 {
		ok := object.Key("scope")
		ok.String(string(v.Scope))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentEBSVolumeConfiguration(v *types.EBSVolumeConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.DeleteOnTermination != nil {
		ok := object.Key("deleteOnTermination")
		ok.Boolean(*v.DeleteOnTermination)
	}
	
	if v.DeviceName != nil {
		ok := object.Key("deviceName")
		ok.String(*v.DeviceName)
	}
	
	if v.FilesystemType != nil {
		ok := object.Key("filesystemType")
		ok.String(*v.FilesystemType)
	}
	
	if v.VolumeId != nil {
		ok := object.Key("volumeId")
		ok.String(*v.VolumeId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentECRAuthData(v *types.ECRAuthData, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.EndpointOverride != nil {
		ok := object.Key("endpointOverride")
		ok.String(*v.EndpointOverride)
	}
	
	if v.Region != nil {
		ok := object.Key("region")
		ok.String(*v.Region)
	}
	
	if v.RegistryId != nil {
		ok := object.Key("registryId")
		ok.String(*v.RegistryId)
	}
	
	if v.UseExecutionRole != nil {
		ok := object.Key("useExecutionRole")
		ok.Boolean(*v.UseExecutionRole)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentEFSAuthorizationConfig(v *types.EFSAuthorizationConfig, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AccessPointId != nil {
		ok := object.Key("accessPointId")
		ok.String(*v.AccessPointId)
	}
	
	if len(v.Iam) > 0 {
		ok := object.Key("iam")
		ok.String(string(v.Iam))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentEFSVolumeConfiguration(v *types.EFSVolumeConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AuthorizationConfig != nil {
		ok := object.Key("authorizationConfig")
		if err := awsAwsjson11_serializeDocumentEFSAuthorizationConfig(v.AuthorizationConfig, ok); err != nil {
			return err
		}
	}
	
	if v.FileSystemId != nil {
		ok := object.Key("fileSystemId")
		ok.String(*v.FileSystemId)
	}
	
	if v.RootDirectory != nil {
		ok := object.Key("rootDirectory")
		ok.String(*v.RootDirectory)
	}
	
	if len(v.TransitEncryption) > 0 {
		ok := object.Key("transitEncryption")
		ok.String(string(v.TransitEncryption))
	}
	
	if v.TransitEncryptionPort != nil {
		ok := object.Key("transitEncryptionPort")
		ok.Integer(*v.TransitEncryptionPort)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentElasticNetworkInterface(v *types.ElasticNetworkInterface, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AttachmentArn != nil {
		ok := object.Key("attachmentArn")
		ok.String(*v.AttachmentArn)
	}
	
	if v.DomainName != nil {
		ok := object.Key("domainName")
		if err := awsAwsjson11_serializeDocumentStringList(v.DomainName, ok); err != nil {
			return err
		}
	}
	
	if v.DomainNameServers != nil {
		ok := object.Key("domainNameServers")
		if err := awsAwsjson11_serializeDocumentStringList(v.DomainNameServers, ok); err != nil {
			return err
		}
	}
	
	if v.Ec2Id != nil {
		ok := object.Key("ec2Id")
		ok.String(*v.Ec2Id)
	}
	
	if v.Index != nil {
		ok := object.Key("index")
		ok.Integer(*v.Index)
	}
	
	if len(v.InterfaceAssociationProtocol) > 0 {
		ok := object.Key("interfaceAssociationProtocol")
		ok.String(string(v.InterfaceAssociationProtocol))
	}
	
	if v.InterfaceTunnelProperties != nil {
		ok := object.Key("interfaceTunnelProperties")
		if err := awsAwsjson11_serializeDocumentNetworkInterfaceTunnelProperties(v.InterfaceTunnelProperties, ok); err != nil {
			return err
		}
	}
	
	if v.InterfaceVethProperties != nil {
		ok := object.Key("interfaceVethProperties")
		if err := awsAwsjson11_serializeDocumentNetworkInterfaceVethProperties(v.InterfaceVethProperties, ok); err != nil {
			return err
		}
	}
	
	if v.InterfaceVlanProperties != nil {
		ok := object.Key("interfaceVlanProperties")
		if err := awsAwsjson11_serializeDocumentNetworkInterfaceVlanProperties(v.InterfaceVlanProperties, ok); err != nil {
			return err
		}
	}
	
	if v.Ipv4Addresses != nil {
		ok := object.Key("ipv4Addresses")
		if err := awsAwsjson11_serializeDocumentIPv4AddressList(v.Ipv4Addresses, ok); err != nil {
			return err
		}
	}
	
	if v.Ipv6Addresses != nil {
		ok := object.Key("ipv6Addresses")
		if err := awsAwsjson11_serializeDocumentIPv6AddressList(v.Ipv6Addresses, ok); err != nil {
			return err
		}
	}
	
	if v.MacAddress != nil {
		ok := object.Key("macAddress")
		ok.String(*v.MacAddress)
	}
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if v.PrivateDnsName != nil {
		ok := object.Key("privateDnsName")
		ok.String(*v.PrivateDnsName)
	}
	
	if v.SubnetGatewayIpv4Address != nil {
		ok := object.Key("subnetGatewayIpv4Address")
		ok.String(*v.SubnetGatewayIpv4Address)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentElasticNetworkInterfaceList(v []types.ElasticNetworkInterface, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentElasticNetworkInterface(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentEncodedString(v *types.EncodedString, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if len(v.Encoding) > 0 {
		ok := object.Key("encoding")
		ok.String(string(v.Encoding))
	}
	
	if v.Value != nil {
		ok := object.Key("value")
		ok.String(*v.Value)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentEnvironmentFile(v *types.EnvironmentFile, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	if v.Value != nil {
		ok := object.Key("value")
		ok.String(*v.Value)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentEnvironmentFiles(v []types.EnvironmentFile, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentEnvironmentFile(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentEnvironmentVariables(v map[string]string, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	for key := range v {
		om := object.Key(key)
		om.String(v[key])
	}
	return nil
}

func awsAwsjson11_serializeDocumentFirelensConfiguration(v *types.FirelensConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Options != nil {
		ok := object.Key("options")
		if err := awsAwsjson11_serializeDocumentFirelensConfigurationOptionsMap(v.Options, ok); err != nil {
			return err
		}
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentFirelensConfigurationOptionsMap(v map[string]string, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	for key := range v {
		om := object.Key(key)
		om.String(v[key])
	}
	return nil
}

func awsAwsjson11_serializeDocumentFSxWindowsFileServerAuthorizationConfig(v *types.FSxWindowsFileServerAuthorizationConfig, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.CredentialsParameter != nil {
		ok := object.Key("credentialsParameter")
		ok.String(*v.CredentialsParameter)
	}
	
	if v.Domain != nil {
		ok := object.Key("domain")
		ok.String(*v.Domain)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentFSxWindowsFileServerVolumeConfiguration(v *types.FSxWindowsFileServerVolumeConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AuthorizationConfig != nil {
		ok := object.Key("authorizationConfig")
		if err := awsAwsjson11_serializeDocumentFSxWindowsFileServerAuthorizationConfig(v.AuthorizationConfig, ok); err != nil {
			return err
		}
	}
	
	if v.FileSystemId != nil {
		ok := object.Key("fileSystemId")
		ok.String(*v.FileSystemId)
	}
	
	if v.RootDirectory != nil {
		ok := object.Key("rootDirectory")
		ok.String(*v.RootDirectory)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentHostVolumeProperties(v *types.HostVolumeProperties, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.SourcePath != nil {
		ok := object.Key("sourcePath")
		ok.String(*v.SourcePath)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentIAMRoleCredentials(v *types.IAMRoleCredentials, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AccessKeyId != nil {
		ok := object.Key("accessKeyId")
		ok.String(*v.AccessKeyId)
	}
	
	if v.CredentialScope != nil {
		ok := object.Key("credentialScope")
		ok.String(*v.CredentialScope)
	}
	
	if v.CredentialsId != nil {
		ok := object.Key("credentialsId")
		ok.String(*v.CredentialsId)
	}
	
	if v.Expiration != nil {
		ok := object.Key("expiration")
		ok.String(*v.Expiration)
	}
	
	if v.RoleArn != nil {
		ok := object.Key("roleArn")
		ok.String(*v.RoleArn)
	}
	
	if v.SecretAccessKey != nil {
		ok := object.Key("secretAccessKey")
		ok.String(*v.SecretAccessKey)
	}
	
	if v.SessionToken != nil {
		ok := object.Key("sessionToken")
		ok.String(*v.SessionToken)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentIntegerList(v []int32, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		av.Integer(v[i])
	}
	return nil
}

func awsAwsjson11_serializeDocumentIPv4AddressAssignment(v *types.IPv4AddressAssignment, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Primary != nil {
		ok := object.Key("primary")
		ok.Boolean(*v.Primary)
	}
	
	if v.PrivateAddress != nil {
		ok := object.Key("privateAddress")
		ok.String(*v.PrivateAddress)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentIPv4AddressList(v []types.IPv4AddressAssignment, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentIPv4AddressAssignment(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentIPv6AddressAssignment(v *types.IPv6AddressAssignment, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Address != nil {
		ok := object.Key("address")
		ok.String(*v.Address)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentIPv6AddressList(v []types.IPv6AddressAssignment, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentIPv6AddressAssignment(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentManagedAgent(v *types.ManagedAgent, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if len(v.Name) > 0 {
		ok := object.Key("name")
		ok.String(string(v.Name))
	}
	
	if v.Properties != nil {
		ok := object.Key("properties")
		if err := awsAwsjson11_serializeDocumentStringMap(v.Properties, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentManagedAgentList(v []types.ManagedAgent, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentManagedAgent(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentMountPoint(v *types.MountPoint, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerPath != nil {
		ok := object.Key("containerPath")
		ok.String(*v.ContainerPath)
	}
	
	if v.ReadOnly != nil {
		ok := object.Key("readOnly")
		ok.Boolean(*v.ReadOnly)
	}
	
	if v.SourceVolume != nil {
		ok := object.Key("sourceVolume")
		ok.String(*v.SourceVolume)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentMountPointList(v []types.MountPoint, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentMountPoint(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentNetworkInterfaceTunnelProperties(v *types.NetworkInterfaceTunnelProperties, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.InterfaceIpAddress != nil {
		ok := object.Key("interfaceIpAddress")
		ok.String(*v.InterfaceIpAddress)
	}
	
	if v.TunnelId != nil {
		ok := object.Key("tunnelId")
		ok.String(*v.TunnelId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentNetworkInterfaceVethProperties(v *types.NetworkInterfaceVethProperties, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.PeerInterface != nil {
		ok := object.Key("peerInterface")
		ok.String(*v.PeerInterface)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentNetworkInterfaceVlanProperties(v *types.NetworkInterfaceVlanProperties, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.TrunkInterfaceMacAddress != nil {
		ok := object.Key("trunkInterfaceMacAddress")
		ok.String(*v.TrunkInterfaceMacAddress)
	}
	
	if v.VlanId != nil {
		ok := object.Key("vlanId")
		ok.String(*v.VlanId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentPortMapping(v *types.PortMapping, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerPort != nil {
		ok := object.Key("containerPort")
		ok.Integer(*v.ContainerPort)
	}
	
	if v.ContainerPortRange != nil {
		ok := object.Key("containerPortRange")
		ok.String(*v.ContainerPortRange)
	}
	
	if v.HostPort != nil {
		ok := object.Key("hostPort")
		ok.Integer(*v.HostPort)
	}
	
	if len(v.Protocol) > 0 {
		ok := object.Key("protocol")
		ok.String(string(v.Protocol))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentPortMappingList(v []types.PortMapping, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentPortMapping(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentProxyConfiguration(v *types.ProxyConfiguration, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerName != nil {
		ok := object.Key("containerName")
		ok.String(*v.ContainerName)
	}
	
	if v.Properties != nil {
		ok := object.Key("properties")
		if err := awsAwsjson11_serializeDocumentStringMap(v.Properties, ok); err != nil {
			return err
		}
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentRegistryAuthenticationData(v *types.RegistryAuthenticationData, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AsmAuthData != nil {
		ok := object.Key("asmAuthData")
		if err := awsAwsjson11_serializeDocumentASMAuthData(v.AsmAuthData, ok); err != nil {
			return err
		}
	}
	
	if v.EcrAuthData != nil {
		ok := object.Key("ecrAuthData")
		if err := awsAwsjson11_serializeDocumentECRAuthData(v.EcrAuthData, ok); err != nil {
			return err
		}
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentRestartPolicy(v *types.RestartPolicy, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Enabled != nil {
		ok := object.Key("enabled")
		ok.Boolean(*v.Enabled)
	}
	
	if v.IgnoredExitCodes != nil {
		ok := object.Key("ignoredExitCodes")
		if err := awsAwsjson11_serializeDocumentIntegerList(v.IgnoredExitCodes, ok); err != nil {
			return err
		}
	}
	
	if v.RestartAttemptPeriod != nil {
		ok := object.Key("restartAttemptPeriod")
		ok.Integer(*v.RestartAttemptPeriod)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentSecret(v *types.Secret, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerPath != nil {
		ok := object.Key("containerPath")
		ok.String(*v.ContainerPath)
	}
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if len(v.Provider) > 0 {
		ok := object.Key("provider")
		ok.String(string(v.Provider))
	}
	
	if v.Region != nil {
		ok := object.Key("region")
		ok.String(*v.Region)
	}
	
	if len(v.Target) > 0 {
		ok := object.Key("target")
		ok.String(string(v.Target))
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	if v.ValueFrom != nil {
		ok := object.Key("valueFrom")
		ok.String(*v.ValueFrom)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentSecretList(v []types.Secret, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentSecret(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentStringList(v []string, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		av.String(v[i])
	}
	return nil
}

func awsAwsjson11_serializeDocumentStringMap(v map[string]string, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	for key := range v {
		om := object.Key(key)
		om.String(v[key])
	}
	return nil
}

func awsAwsjson11_serializeDocumentTask(v *types.Task, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AgentConfiguration != nil {
		ok := object.Key("agentConfiguration")
		ok.String(*v.AgentConfiguration)
	}
	
	if v.Arn != nil {
		ok := object.Key("arn")
		ok.String(*v.Arn)
	}
	
	if v.Associations != nil {
		ok := object.Key("associations")
		if err := awsAwsjson11_serializeDocumentAssociations(v.Associations, ok); err != nil {
			return err
		}
	}
	
	if v.Attachments != nil {
		ok := object.Key("attachments")
		if err := awsAwsjson11_serializeDocumentAttachmentList(v.Attachments, ok); err != nil {
			return err
		}
	}
	
	if v.Containers != nil {
		ok := object.Key("containers")
		if err := awsAwsjson11_serializeDocumentContainerList(v.Containers, ok); err != nil {
			return err
		}
	}
	
	if v.Cpu != nil {
		ok := object.Key("cpu")
		switch {
			case math.IsNaN(*v.Cpu):
				ok.String("NaN")
			
			case math.IsInf(*v.Cpu, 1):
				ok.String("Infinity")
			
			case math.IsInf(*v.Cpu, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(*v.Cpu)
			
		}
	}
	
	if v.DesiredStatus != nil {
		ok := object.Key("desiredStatus")
		ok.String(*v.DesiredStatus)
	}
	
	if v.ElasticNetworkInterfaces != nil {
		ok := object.Key("elasticNetworkInterfaces")
		if err := awsAwsjson11_serializeDocumentElasticNetworkInterfaceList(v.ElasticNetworkInterfaces, ok); err != nil {
			return err
		}
	}
	
	if v.EnableFaultInjection != nil {
		ok := object.Key("enableFaultInjection")
		ok.Boolean(*v.EnableFaultInjection)
	}
	
	if v.ExecutionRoleCredentials != nil {
		ok := object.Key("executionRoleCredentials")
		if err := awsAwsjson11_serializeDocumentIAMRoleCredentials(v.ExecutionRoleCredentials, ok); err != nil {
			return err
		}
	}
	
	if v.Family != nil {
		ok := object.Key("family")
		ok.String(*v.Family)
	}
	
	if v.IpcMode != nil {
		ok := object.Key("ipcMode")
		ok.String(*v.IpcMode)
	}
	
	if v.LaunchType != nil {
		ok := object.Key("launchType")
		ok.String(*v.LaunchType)
	}
	
	if v.Memory != nil {
		ok := object.Key("memory")
		ok.Integer(*v.Memory)
	}
	
	if v.NetworkMode != nil {
		ok := object.Key("networkMode")
		ok.String(*v.NetworkMode)
	}
	
	if v.Overrides != nil {
		ok := object.Key("overrides")
		ok.String(*v.Overrides)
	}
	
	if v.PidMode != nil {
		ok := object.Key("pidMode")
		ok.String(*v.PidMode)
	}
	
	if v.ProxyConfiguration != nil {
		ok := object.Key("proxyConfiguration")
		if err := awsAwsjson11_serializeDocumentProxyConfiguration(v.ProxyConfiguration, ok); err != nil {
			return err
		}
	}
	
	if v.RoleCredentials != nil {
		ok := object.Key("roleCredentials")
		if err := awsAwsjson11_serializeDocumentIAMRoleCredentials(v.RoleCredentials, ok); err != nil {
			return err
		}
	}
	
	if v.ServiceName != nil {
		ok := object.Key("serviceName")
		ok.String(*v.ServiceName)
	}
	
	if v.TaskClusterArn != nil {
		ok := object.Key("taskClusterArn")
		ok.String(*v.TaskClusterArn)
	}
	
	if v.TaskDefinitionAccountId != nil {
		ok := object.Key("taskDefinitionAccountId")
		ok.String(*v.TaskDefinitionAccountId)
	}
	
	if v.Version != nil {
		ok := object.Key("version")
		ok.String(*v.Version)
	}
	
	if v.Volumes != nil {
		ok := object.Key("volumes")
		if err := awsAwsjson11_serializeDocumentVolumeList(v.Volumes, ok); err != nil {
			return err
		}
	}
	
	if v.Zone != nil {
		ok := object.Key("zone")
		ok.String(*v.Zone)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentTaskIdentifier(v *types.TaskIdentifier, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.DesiredStatus != nil {
		ok := object.Key("desiredStatus")
		ok.String(*v.DesiredStatus)
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskClusterArn != nil {
		ok := object.Key("taskClusterArn")
		ok.String(*v.TaskClusterArn)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentTaskIdentifierList(v []types.TaskIdentifier, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentTaskIdentifier(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentTaskList(v []types.Task, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentTask(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentUpdateInfo(v *types.UpdateInfo, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Location != nil {
		ok := object.Key("location")
		ok.String(*v.Location)
	}
	
	if v.Signature != nil {
		ok := object.Key("signature")
		ok.String(*v.Signature)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVersionInfo(v *types.VersionInfo, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.AgentHash != nil {
		ok := object.Key("agentHash")
		ok.String(*v.AgentHash)
	}
	
	if v.AgentVersion != nil {
		ok := object.Key("agentVersion")
		ok.String(*v.AgentVersion)
	}
	
	if v.DockerVersion != nil {
		ok := object.Key("dockerVersion")
		ok.String(*v.DockerVersion)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVolume(v *types.Volume, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.DockerVolumeConfiguration != nil {
		ok := object.Key("dockerVolumeConfiguration")
		if err := awsAwsjson11_serializeDocumentDockerVolumeConfiguration(v.DockerVolumeConfiguration, ok); err != nil {
			return err
		}
	}
	
	if v.EbsVolumeConfiguration != nil {
		ok := object.Key("ebsVolumeConfiguration")
		if err := awsAwsjson11_serializeDocumentEBSVolumeConfiguration(v.EbsVolumeConfiguration, ok); err != nil {
			return err
		}
	}
	
	if v.EfsVolumeConfiguration != nil {
		ok := object.Key("efsVolumeConfiguration")
		if err := awsAwsjson11_serializeDocumentEFSVolumeConfiguration(v.EfsVolumeConfiguration, ok); err != nil {
			return err
		}
	}
	
	if v.FsxWindowsFileServerVolumeConfiguration != nil {
		ok := object.Key("fsxWindowsFileServerVolumeConfiguration")
		if err := awsAwsjson11_serializeDocumentFSxWindowsFileServerVolumeConfiguration(v.FsxWindowsFileServerVolumeConfiguration, ok); err != nil {
			return err
		}
	}
	
	if v.Host != nil {
		ok := object.Key("host")
		if err := awsAwsjson11_serializeDocumentHostVolumeProperties(v.Host, ok); err != nil {
			return err
		}
	}
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	if len(v.Type) > 0 {
		ok := object.Key("type")
		ok.String(string(v.Type))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVolumeFrom(v *types.VolumeFrom, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ReadOnly != nil {
		ok := object.Key("readOnly")
		ok.Boolean(*v.ReadOnly)
	}
	
	if v.SourceContainer != nil {
		ok := object.Key("sourceContainer")
		ok.String(*v.SourceContainer)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVolumeFromList(v []types.VolumeFrom, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentVolumeFrom(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentVolumeList(v []types.Volume, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentVolume(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeOpDocumentAttachInstanceNetworkInterfacesInput(v *AttachInstanceNetworkInterfacesInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.ElasticNetworkInterfaces != nil {
		ok := object.Key("elasticNetworkInterfaces")
		if err := awsAwsjson11_serializeDocumentElasticNetworkInterfaceList(v.ElasticNetworkInterfaces, ok); err != nil {
			return err
		}
	}
	
	if v.GeneratedAt != nil {
		ok := object.Key("generatedAt")
		ok.Long(*v.GeneratedAt)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.WaitTimeoutMs != nil {
		ok := object.Key("waitTimeoutMs")
		ok.Long(*v.WaitTimeoutMs)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentAttachTaskNetworkInterfacesInput(v *AttachTaskNetworkInterfacesInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.ElasticNetworkInterfaces != nil {
		ok := object.Key("elasticNetworkInterfaces")
		if err := awsAwsjson11_serializeDocumentElasticNetworkInterfaceList(v.ElasticNetworkInterfaces, ok); err != nil {
			return err
		}
	}
	
	if v.GeneratedAt != nil {
		ok := object.Key("generatedAt")
		ok.Long(*v.GeneratedAt)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskClusterArn != nil {
		ok := object.Key("taskClusterArn")
		ok.String(*v.TaskClusterArn)
	}
	
	if v.WaitTimeoutMs != nil {
		ok := object.Key("waitTimeoutMs")
		ok.Long(*v.WaitTimeoutMs)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentConfirmAttachmentInput(v *ConfirmAttachmentInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Attachment != nil {
		ok := object.Key("attachment")
		if err := awsAwsjson11_serializeDocumentAttachment(v.Attachment, ok); err != nil {
			return err
		}
	}
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.GeneratedAt != nil {
		ok := object.Key("generatedAt")
		ok.Long(*v.GeneratedAt)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskClusterArn != nil {
		ok := object.Key("taskClusterArn")
		ok.String(*v.TaskClusterArn)
	}
	
	if v.WaitTimeoutMs != nil {
		ok := object.Key("waitTimeoutMs")
		ok.Long(*v.WaitTimeoutMs)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentErrorInput(v *ErrorInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Message != nil {
		ok := object.Key("message")
		ok.String(*v.Message)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentHeartbeatInput(v *HeartbeatInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Healthy != nil {
		ok := object.Key("healthy")
		ok.Boolean(*v.Healthy)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPayloadInput(v *PayloadInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.GeneratedAt != nil {
		ok := object.Key("generatedAt")
		ok.Long(*v.GeneratedAt)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.SeqNum != nil {
		ok := object.Key("seqNum")
		ok.Integer(*v.SeqNum)
	}
	
	if v.Tasks != nil {
		ok := object.Key("tasks")
		if err := awsAwsjson11_serializeDocumentTaskList(v.Tasks, ok); err != nil {
			return err
		}
	}
	
	if v.Timeline != nil {
		ok := object.Key("timeline")
		ok.Long(*v.Timeline)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPerformUpdateInput(v *PerformUpdateInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.UpdateInfo != nil {
		ok := object.Key("updateInfo")
		if err := awsAwsjson11_serializeDocumentUpdateInfo(v.UpdateInfo, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPollInput(v *PollInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	if v.ProtocolVersion != nil {
		ok := object.Key("protocolVersion")
		ok.Integer(*v.ProtocolVersion)
	}
	
	if v.SendCredentials != nil {
		ok := object.Key("sendCredentials")
		ok.Boolean(*v.SendCredentials)
	}
	
	if v.SeqNum != nil {
		ok := object.Key("seqNum")
		ok.Integer(*v.SeqNum)
	}
	
	if v.Timeline != nil {
		ok := object.Key("timeline")
		ok.Long(*v.Timeline)
	}
	
	if v.VersionInfo != nil {
		ok := object.Key("versionInfo")
		if err := awsAwsjson11_serializeDocumentVersionInfo(v.VersionInfo, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentRefreshTaskIAMRoleCredentialsInput(v *RefreshTaskIAMRoleCredentialsInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.RoleCredentials != nil {
		ok := object.Key("roleCredentials")
		if err := awsAwsjson11_serializeDocumentIAMRoleCredentials(v.RoleCredentials, ok); err != nil {
			return err
		}
	}
	
	if len(v.RoleType) > 0 {
		ok := object.Key("roleType")
		ok.String(string(v.RoleType))
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskClusterArn != nil {
		ok := object.Key("taskClusterArn")
		ok.String(*v.TaskClusterArn)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentStageUpdateInput(v *StageUpdateInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.UpdateInfo != nil {
		ok := object.Key("updateInfo")
		if err := awsAwsjson11_serializeDocumentUpdateInfo(v.UpdateInfo, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentTaskManifestInput(v *TaskManifestInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerInstanceArn != nil {
		ok := object.Key("containerInstanceArn")
		ok.String(*v.ContainerInstanceArn)
	}
	
	if v.GeneratedAt != nil {
		ok := object.Key("generatedAt")
		ok.Long(*v.GeneratedAt)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.Tasks != nil {
		ok := object.Key("tasks")
		if err := awsAwsjson11_serializeDocumentTaskIdentifierList(v.Tasks, ok); err != nil {
			return err
		}
	}
	
	if v.Timeline != nil {
		ok := object.Key("timeline")
		ok.Long(*v.Timeline)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentTaskStopVerificationInput(v *TaskStopVerificationInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.StopCandidates != nil {
		ok := object.Key("stopCandidates")
		if err := awsAwsjson11_serializeDocumentTaskIdentifierList(v.StopCandidates, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentUpdateFailureInput(v *UpdateFailureInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	if v.Reason != nil {
		ok := object.Key("reason")
		ok.String(*v.Reason)
	}
	
	return nil
}
