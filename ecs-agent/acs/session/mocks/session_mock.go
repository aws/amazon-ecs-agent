// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/acs/session (interfaces: ENIHandler,ResourceHandler)

// Package mock_session is a generated GoMock package.
package mock_session

import (
	reflect "reflect"

	eni "github.com/aws/amazon-ecs-agent/ecs-agent/api/eni"
	resource "github.com/aws/amazon-ecs-agent/ecs-agent/api/resource"
	gomock "github.com/golang/mock/gomock"
)

// MockENIHandler is a mock of ENIHandler interface.
type MockENIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockENIHandlerMockRecorder
}

// MockENIHandlerMockRecorder is the mock recorder for MockENIHandler.
type MockENIHandlerMockRecorder struct {
	mock *MockENIHandler
}

// NewMockENIHandler creates a new mock instance.
func NewMockENIHandler(ctrl *gomock.Controller) *MockENIHandler {
	mock := &MockENIHandler{ctrl: ctrl}
	mock.recorder = &MockENIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockENIHandler) EXPECT() *MockENIHandlerMockRecorder {
	return m.recorder
}

// HandleENIAttachment mocks base method.
func (m *MockENIHandler) HandleENIAttachment(arg0 *eni.ENIAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleENIAttachment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleENIAttachment indicates an expected call of HandleENIAttachment.
func (mr *MockENIHandlerMockRecorder) HandleENIAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleENIAttachment", reflect.TypeOf((*MockENIHandler)(nil).HandleENIAttachment), arg0)
}

// MockResourceHandler is a mock of ResourceHandler interface.
type MockResourceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResourceHandlerMockRecorder
}

// MockResourceHandlerMockRecorder is the mock recorder for MockResourceHandler.
type MockResourceHandlerMockRecorder struct {
	mock *MockResourceHandler
}

// NewMockResourceHandler creates a new mock instance.
func NewMockResourceHandler(ctrl *gomock.Controller) *MockResourceHandler {
	mock := &MockResourceHandler{ctrl: ctrl}
	mock.recorder = &MockResourceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceHandler) EXPECT() *MockResourceHandlerMockRecorder {
	return m.recorder
}

// HandleResourceAttachment mocks base method.
func (m *MockResourceHandler) HandleResourceAttachment(arg0 *resource.ResourceAttachment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleResourceAttachment", arg0)
}

// HandleResourceAttachment indicates an expected call of HandleResourceAttachment.
func (mr *MockResourceHandlerMockRecorder) HandleResourceAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResourceAttachment", reflect.TypeOf((*MockResourceHandler)(nil).HandleResourceAttachment), arg0)
}
