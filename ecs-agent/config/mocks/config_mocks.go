// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/config (interfaces: AgentConfigAccessor)

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAgentConfigAccessor is a mock of AgentConfigAccessor interface.
type MockAgentConfigAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConfigAccessorMockRecorder
}

// MockAgentConfigAccessorMockRecorder is the mock recorder for MockAgentConfigAccessor.
type MockAgentConfigAccessorMockRecorder struct {
	mock *MockAgentConfigAccessor
}

// NewMockAgentConfigAccessor creates a new mock instance.
func NewMockAgentConfigAccessor(ctrl *gomock.Controller) *MockAgentConfigAccessor {
	mock := &MockAgentConfigAccessor{ctrl: ctrl}
	mock.recorder = &MockAgentConfigAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentConfigAccessor) EXPECT() *MockAgentConfigAccessorMockRecorder {
	return m.recorder
}

// APIEndpoint mocks base method.
func (m *MockAgentConfigAccessor) APIEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIEndpoint indicates an expected call of APIEndpoint.
func (mr *MockAgentConfigAccessorMockRecorder) APIEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIEndpoint", reflect.TypeOf((*MockAgentConfigAccessor)(nil).APIEndpoint))
}

// AWSRegion mocks base method.
func (m *MockAgentConfigAccessor) AWSRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AWSRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// AWSRegion indicates an expected call of AWSRegion.
func (mr *MockAgentConfigAccessorMockRecorder) AWSRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AWSRegion", reflect.TypeOf((*MockAgentConfigAccessor)(nil).AWSRegion))
}

// AcceptInsecureCert mocks base method.
func (m *MockAgentConfigAccessor) AcceptInsecureCert() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInsecureCert")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptInsecureCert indicates an expected call of AcceptInsecureCert.
func (mr *MockAgentConfigAccessorMockRecorder) AcceptInsecureCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInsecureCert", reflect.TypeOf((*MockAgentConfigAccessor)(nil).AcceptInsecureCert))
}

// Cluster mocks base method.
func (m *MockAgentConfigAccessor) Cluster() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *MockAgentConfigAccessorMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockAgentConfigAccessor)(nil).Cluster))
}

// DefaultClusterName mocks base method.
func (m *MockAgentConfigAccessor) DefaultClusterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultClusterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultClusterName indicates an expected call of DefaultClusterName.
func (mr *MockAgentConfigAccessorMockRecorder) DefaultClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultClusterName", reflect.TypeOf((*MockAgentConfigAccessor)(nil).DefaultClusterName))
}

// External mocks base method.
func (m *MockAgentConfigAccessor) External() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "External")
	ret0, _ := ret[0].(bool)
	return ret0
}

// External indicates an expected call of External.
func (mr *MockAgentConfigAccessorMockRecorder) External() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "External", reflect.TypeOf((*MockAgentConfigAccessor)(nil).External))
}

// InstanceAttributes mocks base method.
func (m *MockAgentConfigAccessor) InstanceAttributes() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceAttributes")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// InstanceAttributes indicates an expected call of InstanceAttributes.
func (mr *MockAgentConfigAccessorMockRecorder) InstanceAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceAttributes", reflect.TypeOf((*MockAgentConfigAccessor)(nil).InstanceAttributes))
}

// NoInstanceIdentityDocument mocks base method.
func (m *MockAgentConfigAccessor) NoInstanceIdentityDocument() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoInstanceIdentityDocument")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoInstanceIdentityDocument indicates an expected call of NoInstanceIdentityDocument.
func (mr *MockAgentConfigAccessorMockRecorder) NoInstanceIdentityDocument() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoInstanceIdentityDocument", reflect.TypeOf((*MockAgentConfigAccessor)(nil).NoInstanceIdentityDocument))
}

// OSFamily mocks base method.
func (m *MockAgentConfigAccessor) OSFamily() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSFamily")
	ret0, _ := ret[0].(string)
	return ret0
}

// OSFamily indicates an expected call of OSFamily.
func (mr *MockAgentConfigAccessorMockRecorder) OSFamily() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSFamily", reflect.TypeOf((*MockAgentConfigAccessor)(nil).OSFamily))
}

// OSType mocks base method.
func (m *MockAgentConfigAccessor) OSType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSType")
	ret0, _ := ret[0].(string)
	return ret0
}

// OSType indicates an expected call of OSType.
func (mr *MockAgentConfigAccessorMockRecorder) OSType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSType", reflect.TypeOf((*MockAgentConfigAccessor)(nil).OSType))
}

// ReservedMemory mocks base method.
func (m *MockAgentConfigAccessor) ReservedMemory() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservedMemory")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// ReservedMemory indicates an expected call of ReservedMemory.
func (mr *MockAgentConfigAccessorMockRecorder) ReservedMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservedMemory", reflect.TypeOf((*MockAgentConfigAccessor)(nil).ReservedMemory))
}

// ReservedPorts mocks base method.
func (m *MockAgentConfigAccessor) ReservedPorts() []uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservedPorts")
	ret0, _ := ret[0].([]uint16)
	return ret0
}

// ReservedPorts indicates an expected call of ReservedPorts.
func (mr *MockAgentConfigAccessorMockRecorder) ReservedPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservedPorts", reflect.TypeOf((*MockAgentConfigAccessor)(nil).ReservedPorts))
}

// ReservedPortsUDP mocks base method.
func (m *MockAgentConfigAccessor) ReservedPortsUDP() []uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservedPortsUDP")
	ret0, _ := ret[0].([]uint16)
	return ret0
}

// ReservedPortsUDP indicates an expected call of ReservedPortsUDP.
func (mr *MockAgentConfigAccessorMockRecorder) ReservedPortsUDP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservedPortsUDP", reflect.TypeOf((*MockAgentConfigAccessor)(nil).ReservedPortsUDP))
}

// UpdateCluster mocks base method.
func (m *MockAgentConfigAccessor) UpdateCluster(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCluster", arg0)
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockAgentConfigAccessorMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockAgentConfigAccessor)(nil).UpdateCluster), arg0)
}
