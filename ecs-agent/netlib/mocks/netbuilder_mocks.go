// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/netlib (interfaces: NetworkBuilder)

// Package mock_netlib is a generated GoMock package.
package mock_netlib

import (
	context "context"
	reflect "reflect"

	ecsacs "github.com/aws/amazon-ecs-agent/ecs-agent/acs/model/ecsacs"
	tasknetworkconfig "github.com/aws/amazon-ecs-agent/ecs-agent/netlib/model/tasknetworkconfig"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkBuilder is a mock of NetworkBuilder interface.
type MockNetworkBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkBuilderMockRecorder
}

// MockNetworkBuilderMockRecorder is the mock recorder for MockNetworkBuilder.
type MockNetworkBuilderMockRecorder struct {
	mock *MockNetworkBuilder
}

// NewMockNetworkBuilder creates a new mock instance.
func NewMockNetworkBuilder(ctrl *gomock.Controller) *MockNetworkBuilder {
	mock := &MockNetworkBuilder{ctrl: ctrl}
	mock.recorder = &MockNetworkBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkBuilder) EXPECT() *MockNetworkBuilderMockRecorder {
	return m.recorder
}

// BuildTaskNetworkConfiguration mocks base method.
func (m *MockNetworkBuilder) BuildTaskNetworkConfiguration(arg0 string, arg1 *ecsacs.Task) (*tasknetworkconfig.TaskNetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTaskNetworkConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*tasknetworkconfig.TaskNetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTaskNetworkConfiguration indicates an expected call of BuildTaskNetworkConfiguration.
func (mr *MockNetworkBuilderMockRecorder) BuildTaskNetworkConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTaskNetworkConfiguration", reflect.TypeOf((*MockNetworkBuilder)(nil).BuildTaskNetworkConfiguration), arg0, arg1)
}

// Start mocks base method.
func (m *MockNetworkBuilder) Start(arg0 context.Context, arg1, arg2 string, arg3 *tasknetworkconfig.NetworkNamespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetworkBuilderMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetworkBuilder)(nil).Start), arg0, arg1, arg2, arg3)
}

// Stop mocks base method.
func (m *MockNetworkBuilder) Stop(arg0 context.Context, arg1, arg2 string, arg3 *tasknetworkconfig.NetworkNamespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkBuilderMockRecorder) Stop(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetworkBuilder)(nil).Stop), arg0, arg1, arg2, arg3)
}
