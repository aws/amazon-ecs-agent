// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/netlib/model/ecscni (interfaces: NetNSUtil)

// Package mock_ecscni is a generated GoMock package.
package mock_ecscni

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetNSUtil is a mock of NetNSUtil interface.
type MockNetNSUtil struct {
	ctrl     *gomock.Controller
	recorder *MockNetNSUtilMockRecorder
}

// MockNetNSUtilMockRecorder is the mock recorder for MockNetNSUtil.
type MockNetNSUtilMockRecorder struct {
	mock *MockNetNSUtil
}

// NewMockNetNSUtil creates a new mock instance.
func NewMockNetNSUtil(ctrl *gomock.Controller) *MockNetNSUtil {
	mock := &MockNetNSUtil{ctrl: ctrl}
	mock.recorder = &MockNetNSUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetNSUtil) EXPECT() *MockNetNSUtilMockRecorder {
	return m.recorder
}

// DelNetNS mocks base method.
func (m *MockNetNSUtil) DelNetNS(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelNetNS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelNetNS indicates an expected call of DelNetNS.
func (mr *MockNetNSUtilMockRecorder) DelNetNS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelNetNS", reflect.TypeOf((*MockNetNSUtil)(nil).DelNetNS), arg0)
}

// GetNetNSPath mocks base method.
func (m *MockNetNSUtil) GetNetNSPath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetNSPath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetNSPath indicates an expected call of GetNetNSPath.
func (mr *MockNetNSUtilMockRecorder) GetNetNSPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetNSPath", reflect.TypeOf((*MockNetNSUtil)(nil).GetNetNSPath), arg0)
}

// NSExists mocks base method.
func (m *MockNetNSUtil) NSExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NSExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NSExists indicates an expected call of NSExists.
func (mr *MockNetNSUtilMockRecorder) NSExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NSExists", reflect.TypeOf((*MockNetNSUtil)(nil).NSExists), arg0)
}

// NewNetNS mocks base method.
func (m *MockNetNSUtil) NewNetNS(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNetNS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewNetNS indicates an expected call of NewNetNS.
func (mr *MockNetNSUtilMockRecorder) NewNetNS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNetNS", reflect.TypeOf((*MockNetNSUtil)(nil).NewNetNS), arg0)
}

// NewNetNSID mocks base method.
func (m *MockNetNSUtil) NewNetNSID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNetNSID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NewNetNSID indicates an expected call of NewNetNSID.
func (mr *MockNetNSUtilMockRecorder) NewNetNSID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNetNSID", reflect.TypeOf((*MockNetNSUtil)(nil).NewNetNSID))
}
