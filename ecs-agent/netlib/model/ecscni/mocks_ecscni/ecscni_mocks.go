// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/netlib/model/ecscni (interfaces: CNI)

// Package mock_ecscni is a generated GoMock package.
package mock_ecscni

import (
	context "context"
	reflect "reflect"

	ecscni "github.com/aws/amazon-ecs-agent/ecs-agent/netlib/model/ecscni"
	types "github.com/containernetworking/cni/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCNI is a mock of CNI interface.
type MockCNI struct {
	ctrl     *gomock.Controller
	recorder *MockCNIMockRecorder
}

// MockCNIMockRecorder is the mock recorder for MockCNI.
type MockCNIMockRecorder struct {
	mock *MockCNI
}

// NewMockCNI creates a new mock instance.
func NewMockCNI(ctrl *gomock.Controller) *MockCNI {
	mock := &MockCNI{ctrl: ctrl}
	mock.recorder = &MockCNIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCNI) EXPECT() *MockCNIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCNI) Add(arg0 context.Context, arg1 ecscni.PluginConfig) (types.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(types.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCNIMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCNI)(nil).Add), arg0, arg1)
}

// Del mocks base method.
func (m *MockCNI) Del(arg0 context.Context, arg1 ecscni.PluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCNIMockRecorder) Del(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCNI)(nil).Del), arg0, arg1)
}

// Version mocks base method.
func (m *MockCNI) Version(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockCNIMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCNI)(nil).Version), arg0)
}
