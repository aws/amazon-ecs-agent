// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/ecs-agent/utils/execwrapper (interfaces: Cmd,Exec)

// Package mock_execwrapper is a generated GoMock package.
package mock_execwrapper

import (
	context "context"
	io "io"
	os "os"
	exec "os/exec"
	reflect "reflect"
	time "time"

	execwrapper "github.com/aws/amazon-ecs-agent/ecs-agent/utils/execwrapper"
	gomock "github.com/golang/mock/gomock"
)

// MockCmd is a mock of Cmd interface.
type MockCmd struct {
	ctrl     *gomock.Controller
	recorder *MockCmdMockRecorder
}

// MockCmdMockRecorder is the mock recorder for MockCmd.
type MockCmdMockRecorder struct {
	mock *MockCmd
}

// NewMockCmd creates a new mock instance.
func NewMockCmd(ctrl *gomock.Controller) *MockCmd {
	mock := &MockCmd{ctrl: ctrl}
	mock.recorder = &MockCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmd) EXPECT() *MockCmdMockRecorder {
	return m.recorder
}

// AppendExtraFiles mocks base method.
func (m *MockCmd) AppendExtraFiles(arg0 ...*os.File) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendExtraFiles", varargs...)
}

// AppendExtraFiles indicates an expected call of AppendExtraFiles.
func (mr *MockCmdMockRecorder) AppendExtraFiles(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendExtraFiles", reflect.TypeOf((*MockCmd)(nil).AppendExtraFiles), arg0...)
}

// Args mocks base method.
func (m *MockCmd) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockCmdMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockCmd)(nil).Args))
}

// CombinedOutput mocks base method.
func (m *MockCmd) CombinedOutput() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinedOutput")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput.
func (mr *MockCmdMockRecorder) CombinedOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockCmd)(nil).CombinedOutput))
}

// KillProcess mocks base method.
func (m *MockCmd) KillProcess() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillProcess")
	ret0, _ := ret[0].(error)
	return ret0
}

// KillProcess indicates an expected call of KillProcess.
func (mr *MockCmdMockRecorder) KillProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillProcess", reflect.TypeOf((*MockCmd)(nil).KillProcess))
}

// Output mocks base method.
func (m *MockCmd) Output() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output.
func (mr *MockCmdMockRecorder) Output() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockCmd)(nil).Output))
}

// Run mocks base method.
func (m *MockCmd) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCmdMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmd)(nil).Run))
}

// SetIOStreams mocks base method.
func (m *MockCmd) SetIOStreams(arg0 io.Reader, arg1, arg2 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIOStreams", arg0, arg1, arg2)
}

// SetIOStreams indicates an expected call of SetIOStreams.
func (mr *MockCmdMockRecorder) SetIOStreams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOStreams", reflect.TypeOf((*MockCmd)(nil).SetIOStreams), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockCmd) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCmdMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCmd)(nil).Start))
}

// Wait mocks base method.
func (m *MockCmd) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockCmdMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCmd)(nil).Wait))
}

// MockExec is a mock of Exec interface.
type MockExec struct {
	ctrl     *gomock.Controller
	recorder *MockExecMockRecorder
}

// MockExecMockRecorder is the mock recorder for MockExec.
type MockExecMockRecorder struct {
	mock *MockExec
}

// NewMockExec creates a new mock instance.
func NewMockExec(ctrl *gomock.Controller) *MockExec {
	mock := &MockExec{ctrl: ctrl}
	mock.recorder = &MockExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExec) EXPECT() *MockExecMockRecorder {
	return m.recorder
}

// CommandContext mocks base method.
func (m *MockExec) CommandContext(arg0 context.Context, arg1 string, arg2 ...string) execwrapper.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandContext", varargs...)
	ret0, _ := ret[0].(execwrapper.Cmd)
	return ret0
}

// CommandContext indicates an expected call of CommandContext.
func (mr *MockExecMockRecorder) CommandContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandContext", reflect.TypeOf((*MockExec)(nil).CommandContext), varargs...)
}

// ConvertToExitError mocks base method.
func (m *MockExec) ConvertToExitError(arg0 error) (*exec.ExitError, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToExitError", arg0)
	ret0, _ := ret[0].(*exec.ExitError)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ConvertToExitError indicates an expected call of ConvertToExitError.
func (mr *MockExecMockRecorder) ConvertToExitError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToExitError", reflect.TypeOf((*MockExec)(nil).ConvertToExitError), arg0)
}

// GetExitCode mocks base method.
func (m *MockExec) GetExitCode(arg0 *exec.ExitError) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitCode", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExitCode indicates an expected call of GetExitCode.
func (mr *MockExecMockRecorder) GetExitCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitCode", reflect.TypeOf((*MockExec)(nil).GetExitCode), arg0)
}

// NewExecContextWithTimeout mocks base method.
func (m *MockExec) NewExecContextWithTimeout(arg0 context.Context, arg1 time.Duration) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExecContextWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// NewExecContextWithTimeout indicates an expected call of NewExecContextWithTimeout.
func (mr *MockExecMockRecorder) NewExecContextWithTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExecContextWithTimeout", reflect.TypeOf((*MockExec)(nil).NewExecContextWithTimeout), arg0, arg1)
}
