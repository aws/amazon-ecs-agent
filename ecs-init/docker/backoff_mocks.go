// Copyright 2015-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: backoff.go in package docker
// Code generated by MockGen. DO NOT EDIT.

// Package docker is a generated GoMock package.
package docker

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBackoff is a mock of Backoff interface
type MockBackoff struct {
	ctrl     *gomock.Controller
	recorder *MockBackoffMockRecorder
}

// MockBackoffMockRecorder is the mock recorder for MockBackoff
type MockBackoffMockRecorder struct {
	mock *MockBackoff
}

// NewMockBackoff creates a new mock instance
func NewMockBackoff(ctrl *gomock.Controller) *MockBackoff {
	mock := &MockBackoff{ctrl: ctrl}
	mock.recorder = &MockBackoffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackoff) EXPECT() *MockBackoffMockRecorder {
	return m.recorder
}

// Duration mocks base method
func (m *MockBackoff) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration
func (mr *MockBackoffMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockBackoff)(nil).Duration))
}

// ShouldRetry mocks base method
func (m *MockBackoff) ShouldRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRetry indicates an expected call of ShouldRetry
func (mr *MockBackoffMockRecorder) ShouldRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRetry", reflect.TypeOf((*MockBackoff)(nil).ShouldRetry))
}
