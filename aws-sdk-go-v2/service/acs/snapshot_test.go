// Code generated by smithy-go-codegen DO NOT EDIT.


//go:build snapshot
package acs

import (
	"context"
	"errors"
	"fmt"
	"io/fs"
	"io"
	"github.com/aws/smithy-go/middleware"
	"os"
	"testing"
)

const ssprefix = "snapshot"

type snapshotOK struct{}

func (snapshotOK) Error() string { return "error: success" }

func createp(path string) (*os.File, error) {
    if err := os.Mkdir(ssprefix, 0700); err != nil && !errors.Is(err, fs.ErrExist) {
        return nil, err
    }
    return os.Create(path)
}

func sspath(op string) string {
    return fmt.Sprintf("%s/api_op_%s.go.snap", ssprefix, op)
}

func updateSnapshot(stack *middleware.Stack, operation string) error {
    f, err := createp(sspath(operation))
    if err != nil {
        return err
    }
    defer f.Close()
    if _, err := f.Write([]byte(stack.String())); err != nil {
        return err
    }
    return snapshotOK{}
}

func testSnapshot(stack *middleware.Stack, operation string) error {
    f, err := os.Open(sspath(operation))
    if errors.Is(err, fs.ErrNotExist) {
        return snapshotOK{}
    }
    if err != nil {
        return err
    }
    defer f.Close()
    expected, err := io.ReadAll(f)
    if err != nil {
        return err
    }
    if actual := stack.String(); actual != string(expected) {
        return fmt.Errorf("%s != %s", expected, actual)
    }
    return snapshotOK{}
}
func TestCheckSnapshot_AttachInstanceNetworkInterfaces(t *testing.T) {
    svc := New(Options{})
    _, err := svc.AttachInstanceNetworkInterfaces(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "AttachInstanceNetworkInterfaces")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_AttachTaskNetworkInterfaces(t *testing.T) {
    svc := New(Options{})
    _, err := svc.AttachTaskNetworkInterfaces(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "AttachTaskNetworkInterfaces")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_ConfirmAttachment(t *testing.T) {
    svc := New(Options{})
    _, err := svc.ConfirmAttachment(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "ConfirmAttachment")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_Error(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Error(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "Error")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_Heartbeat(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Heartbeat(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "Heartbeat")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_Payload(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Payload(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "Payload")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_PerformUpdate(t *testing.T) {
    svc := New(Options{})
    _, err := svc.PerformUpdate(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "PerformUpdate")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_Poll(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Poll(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "Poll")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_RefreshTaskIAMRoleCredentials(t *testing.T) {
    svc := New(Options{})
    _, err := svc.RefreshTaskIAMRoleCredentials(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "RefreshTaskIAMRoleCredentials")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_StageUpdate(t *testing.T) {
    svc := New(Options{})
    _, err := svc.StageUpdate(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "StageUpdate")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_TaskManifest(t *testing.T) {
    svc := New(Options{})
    _, err := svc.TaskManifest(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "TaskManifest")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_TaskStopVerification(t *testing.T) {
    svc := New(Options{})
    _, err := svc.TaskStopVerification(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "TaskStopVerification")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestCheckSnapshot_UpdateFailure(t *testing.T) {
    svc := New(Options{})
    _, err := svc.UpdateFailure(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return testSnapshot(stack, "UpdateFailure")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}
func TestUpdateSnapshot_AttachInstanceNetworkInterfaces(t *testing.T) {
    svc := New(Options{})
    _, err := svc.AttachInstanceNetworkInterfaces(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "AttachInstanceNetworkInterfaces")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_AttachTaskNetworkInterfaces(t *testing.T) {
    svc := New(Options{})
    _, err := svc.AttachTaskNetworkInterfaces(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "AttachTaskNetworkInterfaces")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_ConfirmAttachment(t *testing.T) {
    svc := New(Options{})
    _, err := svc.ConfirmAttachment(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "ConfirmAttachment")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_Error(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Error(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "Error")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_Heartbeat(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Heartbeat(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "Heartbeat")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_Payload(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Payload(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "Payload")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_PerformUpdate(t *testing.T) {
    svc := New(Options{})
    _, err := svc.PerformUpdate(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "PerformUpdate")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_Poll(t *testing.T) {
    svc := New(Options{})
    _, err := svc.Poll(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "Poll")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_RefreshTaskIAMRoleCredentials(t *testing.T) {
    svc := New(Options{})
    _, err := svc.RefreshTaskIAMRoleCredentials(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "RefreshTaskIAMRoleCredentials")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_StageUpdate(t *testing.T) {
    svc := New(Options{})
    _, err := svc.StageUpdate(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "StageUpdate")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_TaskManifest(t *testing.T) {
    svc := New(Options{})
    _, err := svc.TaskManifest(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "TaskManifest")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_TaskStopVerification(t *testing.T) {
    svc := New(Options{})
    _, err := svc.TaskStopVerification(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "TaskStopVerification")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}

func TestUpdateSnapshot_UpdateFailure(t *testing.T) {
    svc := New(Options{})
    _, err := svc.UpdateFailure(context.Background(), nil, func(o *Options) {
        o.APIOptions = append(o.APIOptions, func(stack *middleware.Stack) error {
            return updateSnapshot(stack, "UpdateFailure")
        })
    })
    if _, ok := err.(snapshotOK); !ok && err != nil {
        t.Fatal(err)
    }
}
