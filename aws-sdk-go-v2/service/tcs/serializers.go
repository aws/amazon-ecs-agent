// Code generated by smithy-go-codegen DO NOT EDIT.


package tcs

import (
	"bytes"
	"context"
	"fmt"
	"github.com/aws/smithy-go/encoding/httpbinding"
	"math"
	"github.com/aws/smithy-go/middleware"
	"path"
	smithy "github.com/aws/smithy-go"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	smithyjson "github.com/aws/smithy-go/encoding/json"
	smithytime "github.com/aws/smithy-go/time"
	"github.com/aws/smithy-go/tracing"
	"github.com/aws/aws-sdk-go-v2/service/tcs/types"
)

type awsAwsjson11_serializeOpHeartbeat struct {
}

func (*awsAwsjson11_serializeOpHeartbeat) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpHeartbeat) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*HeartbeatInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerServiceTelemetryV20150310.Heartbeat")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentHeartbeatInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPublishHealth struct {
}

func (*awsAwsjson11_serializeOpPublishHealth) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPublishHealth) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PublishHealthInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerServiceTelemetryV20150310.PublishHealth")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPublishHealthInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPublishInstanceStatus struct {
}

func (*awsAwsjson11_serializeOpPublishInstanceStatus) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPublishInstanceStatus) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PublishInstanceStatusInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerServiceTelemetryV20150310.PublishInstanceStatus")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPublishInstanceStatusInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpPublishMetrics struct {
}

func (*awsAwsjson11_serializeOpPublishMetrics) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpPublishMetrics) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*PublishMetricsInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerServiceTelemetryV20150310.PublishMetrics")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentPublishMetricsInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
type awsAwsjson11_serializeOpStartTelemetrySession struct {
}

func (*awsAwsjson11_serializeOpStartTelemetrySession) ID() string {
	return "OperationSerializer"
}

func (m *awsAwsjson11_serializeOpStartTelemetrySession) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	_, span := tracing.StartSpan(ctx, "OperationSerializer")
	endTimer := startMetricTimer(ctx, "client.call.serialization_duration")
	defer endTimer()
	defer span.End()
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*StartTelemetrySessionInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	operationPath := "/"
	if len(request.Request.URL.Path) == 0 {
	    request.Request.URL.Path = operationPath
	} else {
	    request.Request.URL.Path = path.Join(request.Request.URL.Path, operationPath)
	    if request.Request.URL.Path != "/" && operationPath[len(operationPath)-1] == '/' {
	        request.Request.URL.Path += "/"
	    }
	}
	request.Request.Method = "POST"
	httpBindingEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	httpBindingEncoder.SetHeader("Content-Type").String("application/x-amz-json-1.1")
	httpBindingEncoder.SetHeader("X-Amz-Target").String("AmazonEC2ContainerServiceTelemetryV20150310.StartTelemetrySession")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsAwsjson11_serializeOpDocumentStartTelemetrySessionInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = httpBindingEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	endTimer()
	span.End()
	return next.HandleSerialize(ctx, in)
}
func awsAwsjson11_serializeDocumentContainerHealth(v *types.ContainerHealth, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerName != nil {
		ok := object.Key("containerName")
		ok.String(*v.ContainerName)
	}
	
	if len(v.HealthStatus) > 0 {
		ok := object.Key("healthStatus")
		ok.String(string(v.HealthStatus))
	}
	
	if v.StatusMessage != nil {
		ok := object.Key("statusMessage")
		ok.String(*v.StatusMessage)
	}
	
	if v.StatusSince != nil {
		ok := object.Key("statusSince")
		ok.Double(smithytime.FormatEpochSeconds(*v.StatusSince))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentContainerHealths(v []types.ContainerHealth, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentContainerHealth(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentContainerMetric(v *types.ContainerMetric, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ContainerArn != nil {
		ok := object.Key("containerArn")
		ok.String(*v.ContainerArn)
	}
	
	if v.ContainerName != nil {
		ok := object.Key("containerName")
		ok.String(*v.ContainerName)
	}
	
	if v.CpuStatsSet != nil {
		ok := object.Key("cpuStatsSet")
		if err := awsAwsjson11_serializeDocumentCWStatsSet(v.CpuStatsSet, ok); err != nil {
			return err
		}
	}
	
	if v.MemoryStatsSet != nil {
		ok := object.Key("memoryStatsSet")
		if err := awsAwsjson11_serializeDocumentCWStatsSet(v.MemoryStatsSet, ok); err != nil {
			return err
		}
	}
	
	if v.NetworkStatsSet != nil {
		ok := object.Key("networkStatsSet")
		if err := awsAwsjson11_serializeDocumentNetworkStatsSet(v.NetworkStatsSet, ok); err != nil {
			return err
		}
	}
	
	if v.RestartStatsSet != nil {
		ok := object.Key("restartStatsSet")
		if err := awsAwsjson11_serializeDocumentRestartStatsSet(v.RestartStatsSet, ok); err != nil {
			return err
		}
	}
	
	if v.StorageStatsSet != nil {
		ok := object.Key("storageStatsSet")
		if err := awsAwsjson11_serializeDocumentStorageStatsSet(v.StorageStatsSet, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentContainerMetrics(v []types.ContainerMetric, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentContainerMetric(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentCWStatsSet(v *types.CWStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Max != 0 {
		ok := object.Key("max")
		switch {
			case math.IsNaN(v.Max):
				ok.String("NaN")
			
			case math.IsInf(v.Max, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Max, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Max)
			
		}
	}
	
	if v.Min != 0 {
		ok := object.Key("min")
		switch {
			case math.IsNaN(v.Min):
				ok.String("NaN")
			
			case math.IsInf(v.Min, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Min, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Min)
			
		}
	}
	
	if v.SampleCount != 0 {
		ok := object.Key("sampleCount")
		ok.Integer(v.SampleCount)
	}
	
	if v.Sum != 0 {
		ok := object.Key("sum")
		switch {
			case math.IsNaN(v.Sum):
				ok.String("NaN")
			
			case math.IsInf(v.Sum, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Sum, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Sum)
			
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentDimension(v *types.Dimension, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Key != nil {
		ok := object.Key("key")
		ok.String(*v.Key)
	}
	
	if v.Value != nil {
		ok := object.Key("value")
		ok.String(*v.Value)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentDimensions(v []types.Dimension, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentDimension(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentEphemeralStorageMetrics(v *types.EphemeralStorageMetrics, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.BytesUtilized != nil {
		ok := object.Key("BytesUtilized")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.BytesUtilized, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentGeneralMetric(v *types.GeneralMetric, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.MetricCounts != nil {
		ok := object.Key("metricCounts")
		if err := awsAwsjson11_serializeDocumentMetricCounts(v.MetricCounts, ok); err != nil {
			return err
		}
	}
	
	if v.MetricName != nil {
		ok := object.Key("metricName")
		ok.String(*v.MetricName)
	}
	
	if v.MetricValues != nil {
		ok := object.Key("metricValues")
		if err := awsAwsjson11_serializeDocumentMetricValues(v.MetricValues, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentGeneralMetrics(v []types.GeneralMetric, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentGeneralMetric(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentGeneralMetricsWrapper(v *types.GeneralMetricsWrapper, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Dimensions != nil {
		ok := object.Key("dimensions")
		if err := awsAwsjson11_serializeDocumentDimensions(v.Dimensions, ok); err != nil {
			return err
		}
	}
	
	if v.GeneralMetrics != nil {
		ok := object.Key("generalMetrics")
		if err := awsAwsjson11_serializeDocumentGeneralMetrics(v.GeneralMetrics, ok); err != nil {
			return err
		}
	}
	
	if len(v.MetricType) > 0 {
		ok := object.Key("metricType")
		ok.String(string(v.MetricType))
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentHealthMetadata(v *types.HealthMetadata, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	if v.Fin {
		ok := object.Key("fin")
		ok.Boolean(v.Fin)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentInstanceMetrics(v *types.InstanceMetrics, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Storage != nil {
		ok := object.Key("storage")
		if err := awsAwsjson11_serializeDocumentInstanceStorageMetrics(v.Storage, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentInstanceStatus(v *types.InstanceStatus, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.LastStatusChange != nil {
		ok := object.Key("lastStatusChange")
		ok.Double(smithytime.FormatEpochSeconds(*v.LastStatusChange))
	}
	
	if v.LastUpdated != nil {
		ok := object.Key("lastUpdated")
		ok.Double(smithytime.FormatEpochSeconds(*v.LastUpdated))
	}
	
	if len(v.Status) > 0 {
		ok := object.Key("status")
		ok.String(string(v.Status))
	}
	
	if v.Type != nil {
		ok := object.Key("type")
		ok.String(*v.Type)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentInstanceStatuses(v []types.InstanceStatus, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentInstanceStatus(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentInstanceStatusMetadata(v *types.InstanceStatusMetadata, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	if v.RequestId != nil {
		ok := object.Key("requestId")
		ok.String(*v.RequestId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentInstanceStorageMetrics(v *types.InstanceStorageMetrics, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.DataFilesystem != 0 {
		ok := object.Key("DataFilesystem")
		switch {
			case math.IsNaN(v.DataFilesystem):
				ok.String("NaN")
			
			case math.IsInf(v.DataFilesystem, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.DataFilesystem, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.DataFilesystem)
			
		}
	}
	
	if v.OSFilesystem != 0 {
		ok := object.Key("OSFilesystem")
		switch {
			case math.IsNaN(v.OSFilesystem):
				ok.String("NaN")
			
			case math.IsInf(v.OSFilesystem, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.OSFilesystem, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.OSFilesystem)
			
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentMetricCounts(v []int64, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		av.Long(v[i])
	}
	return nil
}

func awsAwsjson11_serializeDocumentMetricsMetadata(v *types.MetricsMetadata, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	if v.Fin {
		ok := object.Key("fin")
		ok.Boolean(v.Fin)
	}
	
	if v.Idle {
		ok := object.Key("idle")
		ok.Boolean(v.Idle)
	}
	
	if v.MessageId != nil {
		ok := object.Key("messageId")
		ok.String(*v.MessageId)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentMetricValues(v []float64, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		switch {
			case math.IsNaN(v[i]):
				av.String("NaN")
			
			case math.IsInf(v[i], 1):
				av.String("Infinity")
			
			case math.IsInf(v[i], -1):
				av.String("-Infinity")
			
			default:
				av.Double(v[i])
			
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentNetworkStatsSet(v *types.NetworkStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.RxBytes != nil {
		ok := object.Key("rxBytes")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.RxBytes, ok); err != nil {
			return err
		}
	}
	
	if v.RxBytesPerSecond != nil {
		ok := object.Key("rxBytesPerSecond")
		if err := awsAwsjson11_serializeDocumentUDoubleCWStatsSet(v.RxBytesPerSecond, ok); err != nil {
			return err
		}
	}
	
	if v.RxDropped != nil {
		ok := object.Key("rxDropped")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.RxDropped, ok); err != nil {
			return err
		}
	}
	
	if v.RxErrors != nil {
		ok := object.Key("rxErrors")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.RxErrors, ok); err != nil {
			return err
		}
	}
	
	if v.RxPackets != nil {
		ok := object.Key("rxPackets")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.RxPackets, ok); err != nil {
			return err
		}
	}
	
	if v.TxBytes != nil {
		ok := object.Key("txBytes")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.TxBytes, ok); err != nil {
			return err
		}
	}
	
	if v.TxBytesPerSecond != nil {
		ok := object.Key("txBytesPerSecond")
		if err := awsAwsjson11_serializeDocumentUDoubleCWStatsSet(v.TxBytesPerSecond, ok); err != nil {
			return err
		}
	}
	
	if v.TxDropped != nil {
		ok := object.Key("txDropped")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.TxDropped, ok); err != nil {
			return err
		}
	}
	
	if v.TxErrors != nil {
		ok := object.Key("txErrors")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.TxErrors, ok); err != nil {
			return err
		}
	}
	
	if v.TxPackets != nil {
		ok := object.Key("txPackets")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.TxPackets, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentRestartStatsSet(v *types.RestartStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.RestartCount != 0 {
		ok := object.Key("restartCount")
		ok.Integer(v.RestartCount)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentServiceConnectMetricsWrapper(v []types.GeneralMetricsWrapper, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentGeneralMetricsWrapper(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentStorageStatsSet(v *types.StorageStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ReadSizeBytes != nil {
		ok := object.Key("readSizeBytes")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.ReadSizeBytes, ok); err != nil {
			return err
		}
	}
	
	if v.WriteSizeBytes != nil {
		ok := object.Key("writeSizeBytes")
		if err := awsAwsjson11_serializeDocumentULongStatsSet(v.WriteSizeBytes, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentTaskHealth(v *types.TaskHealth, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.Containers != nil {
		ok := object.Key("containers")
		if err := awsAwsjson11_serializeDocumentContainerHealths(v.Containers, ok); err != nil {
			return err
		}
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskDefinitionFamily != nil {
		ok := object.Key("taskDefinitionFamily")
		ok.String(*v.TaskDefinitionFamily)
	}
	
	if v.TaskDefinitionVersion != nil {
		ok := object.Key("taskDefinitionVersion")
		ok.String(*v.TaskDefinitionVersion)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentTaskHealths(v []types.TaskHealth, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentTaskHealth(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentTaskMetric(v *types.TaskMetric, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.ClusterArn != nil {
		ok := object.Key("clusterArn")
		ok.String(*v.ClusterArn)
	}
	
	if v.ContainerMetrics != nil {
		ok := object.Key("containerMetrics")
		if err := awsAwsjson11_serializeDocumentContainerMetrics(v.ContainerMetrics, ok); err != nil {
			return err
		}
	}
	
	if v.EphemeralStorageMetrics != nil {
		ok := object.Key("ephemeralStorageMetrics")
		if err := awsAwsjson11_serializeDocumentEphemeralStorageMetrics(v.EphemeralStorageMetrics, ok); err != nil {
			return err
		}
	}
	
	if v.ServiceConnectMetricsWrapper != nil {
		ok := object.Key("serviceConnectMetricsWrapper")
		if err := awsAwsjson11_serializeDocumentServiceConnectMetricsWrapper(v.ServiceConnectMetricsWrapper, ok); err != nil {
			return err
		}
	}
	
	if v.TaskArn != nil {
		ok := object.Key("taskArn")
		ok.String(*v.TaskArn)
	}
	
	if v.TaskDefinitionFamily != nil {
		ok := object.Key("taskDefinitionFamily")
		ok.String(*v.TaskDefinitionFamily)
	}
	
	if v.TaskDefinitionVersion != nil {
		ok := object.Key("taskDefinitionVersion")
		ok.String(*v.TaskDefinitionVersion)
	}
	
	if v.VolumeMetrics != nil {
		ok := object.Key("volumeMetrics")
		if err := awsAwsjson11_serializeDocumentVolumeMetrics(v.VolumeMetrics, ok); err != nil {
			return err
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentTaskMetrics(v []types.TaskMetric, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentTaskMetric(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeDocumentUDoubleCWStatsSet(v *types.UDoubleCWStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	{
		ok := object.Key("max")
		switch {
			case math.IsNaN(v.Max):
				ok.String("NaN")
			
			case math.IsInf(v.Max, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Max, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Max)
			
		}
	}
	
	{
		ok := object.Key("min")
		switch {
			case math.IsNaN(v.Min):
				ok.String("NaN")
			
			case math.IsInf(v.Min, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Min, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Min)
			
		}
	}
	
	{
		ok := object.Key("sampleCount")
		ok.Integer(v.SampleCount)
	}
	
	{
		ok := object.Key("sum")
		switch {
			case math.IsNaN(v.Sum):
				ok.String("NaN")
			
			case math.IsInf(v.Sum, 1):
				ok.String("Infinity")
			
			case math.IsInf(v.Sum, -1):
				ok.String("-Infinity")
			
			default:
				ok.Double(v.Sum)
			
		}
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentULongStatsSet(v *types.ULongStatsSet, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	{
		ok := object.Key("max")
		ok.Long(v.Max)
	}
	
	{
		ok := object.Key("min")
		ok.Long(v.Min)
	}
	
	if v.OverflowMax != 0 {
		ok := object.Key("overflowMax")
		ok.Long(v.OverflowMax)
	}
	
	if v.OverflowMin != 0 {
		ok := object.Key("overflowMin")
		ok.Long(v.OverflowMin)
	}
	
	if v.OverflowSum != 0 {
		ok := object.Key("overflowSum")
		ok.Long(v.OverflowSum)
	}
	
	{
		ok := object.Key("sampleCount")
		ok.Long(v.SampleCount)
	}
	
	{
		ok := object.Key("sum")
		ok.Long(v.Sum)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVolumeMetric(v *types.VolumeMetric, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Size != nil {
		ok := object.Key("size")
		if err := awsAwsjson11_serializeDocumentUDoubleCWStatsSet(v.Size, ok); err != nil {
			return err
		}
	}
	
	if v.Utilized != nil {
		ok := object.Key("utilized")
		if err := awsAwsjson11_serializeDocumentUDoubleCWStatsSet(v.Utilized, ok); err != nil {
			return err
		}
	}
	
	if v.VolumeId != nil {
		ok := object.Key("volumeId")
		ok.String(*v.VolumeId)
	}
	
	if v.VolumeName != nil {
		ok := object.Key("volumeName")
		ok.String(*v.VolumeName)
	}
	
	return nil
}

func awsAwsjson11_serializeDocumentVolumeMetrics(v []types.VolumeMetric, value smithyjson.Value) error {
	array := value.Array()
	defer array.Close()
	
	for i := range v {
		av := array.Value()
		if err := awsAwsjson11_serializeDocumentVolumeMetric(&v[i], av); err != nil {
			return err
		}
	}
	return nil
}

func awsAwsjson11_serializeOpDocumentHeartbeatInput(v *HeartbeatInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Healthy {
		ok := object.Key("healthy")
		ok.Boolean(v.Healthy)
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPublishHealthInput(v *PublishHealthInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Metadata != nil {
		ok := object.Key("metadata")
		if err := awsAwsjson11_serializeDocumentHealthMetadata(v.Metadata, ok); err != nil {
			return err
		}
	}
	
	if v.Tasks != nil {
		ok := object.Key("tasks")
		if err := awsAwsjson11_serializeDocumentTaskHealths(v.Tasks, ok); err != nil {
			return err
		}
	}
	
	if v.Timestamp != nil {
		ok := object.Key("timestamp")
		ok.Double(smithytime.FormatEpochSeconds(*v.Timestamp))
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPublishInstanceStatusInput(v *PublishInstanceStatusInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Metadata != nil {
		ok := object.Key("metadata")
		if err := awsAwsjson11_serializeDocumentInstanceStatusMetadata(v.Metadata, ok); err != nil {
			return err
		}
	}
	
	if v.Statuses != nil {
		ok := object.Key("statuses")
		if err := awsAwsjson11_serializeDocumentInstanceStatuses(v.Statuses, ok); err != nil {
			return err
		}
	}
	
	if v.Timestamp != nil {
		ok := object.Key("timestamp")
		ok.Double(smithytime.FormatEpochSeconds(*v.Timestamp))
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentPublishMetricsInput(v *PublishMetricsInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.InstanceMetrics != nil {
		ok := object.Key("instanceMetrics")
		if err := awsAwsjson11_serializeDocumentInstanceMetrics(v.InstanceMetrics, ok); err != nil {
			return err
		}
	}
	
	if v.Metadata != nil {
		ok := object.Key("metadata")
		if err := awsAwsjson11_serializeDocumentMetricsMetadata(v.Metadata, ok); err != nil {
			return err
		}
	}
	
	if v.TaskMetrics != nil {
		ok := object.Key("taskMetrics")
		if err := awsAwsjson11_serializeDocumentTaskMetrics(v.TaskMetrics, ok); err != nil {
			return err
		}
	}
	
	if v.Timestamp != nil {
		ok := object.Key("timestamp")
		ok.Double(smithytime.FormatEpochSeconds(*v.Timestamp))
	}
	
	return nil
}

func awsAwsjson11_serializeOpDocumentStartTelemetrySessionInput(v *StartTelemetrySessionInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Cluster != nil {
		ok := object.Key("cluster")
		ok.String(*v.Cluster)
	}
	
	if v.ContainerInstance != nil {
		ok := object.Key("containerInstance")
		ok.String(*v.ContainerInstance)
	}
	
	return nil
}
