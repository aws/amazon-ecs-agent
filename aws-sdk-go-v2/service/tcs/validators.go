// Code generated by smithy-go-codegen DO NOT EDIT.


package tcs

import (
	"context"
	"fmt"
	"github.com/aws/smithy-go/middleware"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/aws-sdk-go-v2/service/tcs/types"
)

type validateOpPublishMetrics struct {
}

func (*validateOpPublishMetrics) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPublishMetrics) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PublishMetricsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPublishMetricsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpPublishMetricsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPublishMetrics{}, middleware.After)
}

func validateContainerMetric(v *types.ContainerMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ContainerMetric"}
	if v.NetworkStatsSet != nil {
		if err := validateNetworkStatsSet(v.NetworkStatsSet); err != nil {
			invalidParams.AddNested("NetworkStatsSet", err.(smithy.InvalidParamsError))
		}
	}
	if v.StorageStatsSet != nil {
		if err := validateStorageStatsSet(v.StorageStatsSet); err != nil {
			invalidParams.AddNested("StorageStatsSet", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateContainerMetrics(v []types.ContainerMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ContainerMetrics"}
	for i := range v {
		if err := validateContainerMetric(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateEphemeralStorageMetrics(v *types.EphemeralStorageMetrics) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EphemeralStorageMetrics"}
	if v.BytesUtilized != nil {
		if err := validateULongStatsSet(v.BytesUtilized); err != nil {
			invalidParams.AddNested("BytesUtilized", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateNetworkStatsSet(v *types.NetworkStatsSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "NetworkStatsSet"}
	if v.RxBytesPerSecond != nil {
		if err := validateUDoubleCWStatsSet(v.RxBytesPerSecond); err != nil {
			invalidParams.AddNested("RxBytesPerSecond", err.(smithy.InvalidParamsError))
		}
	}
	if v.RxBytes != nil {
		if err := validateULongStatsSet(v.RxBytes); err != nil {
			invalidParams.AddNested("RxBytes", err.(smithy.InvalidParamsError))
		}
	}
	if v.RxDropped != nil {
		if err := validateULongStatsSet(v.RxDropped); err != nil {
			invalidParams.AddNested("RxDropped", err.(smithy.InvalidParamsError))
		}
	}
	if v.RxErrors != nil {
		if err := validateULongStatsSet(v.RxErrors); err != nil {
			invalidParams.AddNested("RxErrors", err.(smithy.InvalidParamsError))
		}
	}
	if v.RxPackets != nil {
		if err := validateULongStatsSet(v.RxPackets); err != nil {
			invalidParams.AddNested("RxPackets", err.(smithy.InvalidParamsError))
		}
	}
	if v.TxBytesPerSecond != nil {
		if err := validateUDoubleCWStatsSet(v.TxBytesPerSecond); err != nil {
			invalidParams.AddNested("TxBytesPerSecond", err.(smithy.InvalidParamsError))
		}
	}
	if v.TxBytes != nil {
		if err := validateULongStatsSet(v.TxBytes); err != nil {
			invalidParams.AddNested("TxBytes", err.(smithy.InvalidParamsError))
		}
	}
	if v.TxDropped != nil {
		if err := validateULongStatsSet(v.TxDropped); err != nil {
			invalidParams.AddNested("TxDropped", err.(smithy.InvalidParamsError))
		}
	}
	if v.TxErrors != nil {
		if err := validateULongStatsSet(v.TxErrors); err != nil {
			invalidParams.AddNested("TxErrors", err.(smithy.InvalidParamsError))
		}
	}
	if v.TxPackets != nil {
		if err := validateULongStatsSet(v.TxPackets); err != nil {
			invalidParams.AddNested("TxPackets", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateStorageStatsSet(v *types.StorageStatsSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StorageStatsSet"}
	if v.ReadSizeBytes != nil {
		if err := validateULongStatsSet(v.ReadSizeBytes); err != nil {
			invalidParams.AddNested("ReadSizeBytes", err.(smithy.InvalidParamsError))
		}
	}
	if v.WriteSizeBytes != nil {
		if err := validateULongStatsSet(v.WriteSizeBytes); err != nil {
			invalidParams.AddNested("WriteSizeBytes", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateTaskMetric(v *types.TaskMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TaskMetric"}
	if v.ContainerMetrics != nil {
		if err := validateContainerMetrics(v.ContainerMetrics); err != nil {
			invalidParams.AddNested("ContainerMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if v.EphemeralStorageMetrics != nil {
		if err := validateEphemeralStorageMetrics(v.EphemeralStorageMetrics); err != nil {
			invalidParams.AddNested("EphemeralStorageMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if v.VolumeMetrics != nil {
		if err := validateVolumeMetrics(v.VolumeMetrics); err != nil {
			invalidParams.AddNested("VolumeMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateTaskMetrics(v []types.TaskMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TaskMetrics"}
	for i := range v {
		if err := validateTaskMetric(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateUDoubleCWStatsSet(v *types.UDoubleCWStatsSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UDoubleCWStatsSet"}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateULongStatsSet(v *types.ULongStatsSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ULongStatsSet"}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateVolumeMetric(v *types.VolumeMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VolumeMetric"}
	if v.Utilized != nil {
		if err := validateUDoubleCWStatsSet(v.Utilized); err != nil {
			invalidParams.AddNested("Utilized", err.(smithy.InvalidParamsError))
		}
	}
	if v.Size != nil {
		if err := validateUDoubleCWStatsSet(v.Size); err != nil {
			invalidParams.AddNested("Size", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateVolumeMetrics(v []types.VolumeMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VolumeMetrics"}
	for i := range v {
		if err := validateVolumeMetric(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateOpPublishMetricsInput(v *PublishMetricsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PublishMetricsInput"}
	if v.TaskMetrics != nil {
		if err := validateTaskMetrics(v.TaskMetrics); err != nil {
			invalidParams.AddNested("TaskMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}
