// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: credentialsfetcher/credentialsfetcher.proto

package credentialsfetcher

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialsFetcherServiceClient is the client API for CredentialsFetcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsFetcherServiceClient interface {
	AddKerberosLease(ctx context.Context, in *CreateKerberosLeaseRequest, opts ...grpc.CallOption) (*CreateKerberosLeaseResponse, error)
	DeleteKerberosLease(ctx context.Context, in *DeleteKerberosLeaseRequest, opts ...grpc.CallOption) (*DeleteKerberosLeaseResponse, error)
}

type credentialsFetcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsFetcherServiceClient(cc grpc.ClientConnInterface) CredentialsFetcherServiceClient {
	return &credentialsFetcherServiceClient{cc}
}

func (c *credentialsFetcherServiceClient) AddKerberosLease(ctx context.Context, in *CreateKerberosLeaseRequest, opts ...grpc.CallOption) (*CreateKerberosLeaseResponse, error) {
	out := new(CreateKerberosLeaseResponse)
	err := c.cc.Invoke(ctx, "/credentialsfetcher.CredentialsFetcherService/AddKerberosLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsFetcherServiceClient) DeleteKerberosLease(ctx context.Context, in *DeleteKerberosLeaseRequest, opts ...grpc.CallOption) (*DeleteKerberosLeaseResponse, error) {
	out := new(DeleteKerberosLeaseResponse)
	err := c.cc.Invoke(ctx, "/credentialsfetcher.CredentialsFetcherService/DeleteKerberosLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialsFetcherServiceServer is the server API for CredentialsFetcherService service.
// All implementations must embed UnimplementedCredentialsFetcherServiceServer
// for forward compatibility
type CredentialsFetcherServiceServer interface {
	AddKerberosLease(context.Context, *CreateKerberosLeaseRequest) (*CreateKerberosLeaseResponse, error)
	DeleteKerberosLease(context.Context, *DeleteKerberosLeaseRequest) (*DeleteKerberosLeaseResponse, error)
	mustEmbedUnimplementedCredentialsFetcherServiceServer()
}

// UnimplementedCredentialsFetcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsFetcherServiceServer struct {
}

func (UnimplementedCredentialsFetcherServiceServer) AddKerberosLease(context.Context, *CreateKerberosLeaseRequest) (*CreateKerberosLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKerberosLease not implemented")
}
func (UnimplementedCredentialsFetcherServiceServer) DeleteKerberosLease(context.Context, *DeleteKerberosLeaseRequest) (*DeleteKerberosLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKerberosLease not implemented")
}
func (UnimplementedCredentialsFetcherServiceServer) mustEmbedUnimplementedCredentialsFetcherServiceServer() {
}

// UnsafeCredentialsFetcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsFetcherServiceServer will
// result in compilation errors.
type UnsafeCredentialsFetcherServiceServer interface {
	mustEmbedUnimplementedCredentialsFetcherServiceServer()
}

func RegisterCredentialsFetcherServiceServer(s grpc.ServiceRegistrar, srv CredentialsFetcherServiceServer) {
	s.RegisterService(&CredentialsFetcherService_ServiceDesc, srv)
}

func _CredentialsFetcherService_AddKerberosLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKerberosLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsFetcherServiceServer).AddKerberosLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credentialsfetcher.CredentialsFetcherService/AddKerberosLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsFetcherServiceServer).AddKerberosLease(ctx, req.(*CreateKerberosLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialsFetcherService_DeleteKerberosLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKerberosLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsFetcherServiceServer).DeleteKerberosLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credentialsfetcher.CredentialsFetcherService/DeleteKerberosLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsFetcherServiceServer).DeleteKerberosLease(ctx, req.(*DeleteKerberosLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialsFetcherService_ServiceDesc is the grpc.ServiceDesc for CredentialsFetcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialsFetcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credentialsfetcher.CredentialsFetcherService",
	HandlerType: (*CredentialsFetcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKerberosLease",
			Handler:    _CredentialsFetcherService_AddKerberosLease_Handler,
		},
		{
			MethodName: "DeleteKerberosLease",
			Handler:    _CredentialsFetcherService_DeleteKerberosLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credentialsfetcher/credentialsfetcher.proto",
}
