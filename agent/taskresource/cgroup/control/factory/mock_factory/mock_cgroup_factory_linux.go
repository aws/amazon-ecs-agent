// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/taskresource/cgroup/control/factory (interfaces: CgroupFactory)

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	reflect "reflect"

	cgroups "github.com/containerd/cgroups"
	gomock "github.com/golang/mock/gomock"
	specs_go "github.com/opencontainers/runtime-spec/specs-go"
)

// MockCgroupFactory is a mock of CgroupFactory interface
type MockCgroupFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCgroupFactoryMockRecorder
}

// MockCgroupFactoryMockRecorder is the mock recorder for MockCgroupFactory
type MockCgroupFactoryMockRecorder struct {
	mock *MockCgroupFactory
}

// NewMockCgroupFactory creates a new mock instance
func NewMockCgroupFactory(ctrl *gomock.Controller) *MockCgroupFactory {
	mock := &MockCgroupFactory{ctrl: ctrl}
	mock.recorder = &MockCgroupFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCgroupFactory) EXPECT() *MockCgroupFactoryMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockCgroupFactory) Load(arg0 cgroups.Hierarchy, arg1 cgroups.Path) (cgroups.Cgroup, error) {
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(cgroups.Cgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockCgroupFactoryMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCgroupFactory)(nil).Load), arg0, arg1)
}

// New mocks base method
func (m *MockCgroupFactory) New(arg0 cgroups.Hierarchy, arg1 cgroups.Path, arg2 *specs_go.LinuxResources) (cgroups.Cgroup, error) {
	ret := m.ctrl.Call(m, "New", arg0, arg1, arg2)
	ret0, _ := ret[0].(cgroups.Cgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockCgroupFactoryMockRecorder) New(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCgroupFactory)(nil).New), arg0, arg1, arg2)
}
