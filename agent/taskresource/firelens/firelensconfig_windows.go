// +build windows

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package firelens

import (
	"fmt"

	generator "github.com/awslabs/go-config-generator-for-fluentd-and-fluentbit"
	"github.com/cihub/seelog"
)

const (
	// inputNameForward is the name of the tcp socket input plugin for fluentd and fluentbit.
	inputNameForward = "forward"

	// S3ConfigPathFluentd and S3ConfigPathFluentbit are the paths where we bind mount the config downloaded from S3 to.
	S3ConfigPathFluentd   = `c:\fluentd\etc\external.conf`
	S3ConfigPathFluentbit = `c:\fluent-bit\etc\external.conf`

	// fluentTagOutputFormat is the format for the log tag captured by the output section. First placeholder is
	// container name. Second placeholder is the wildcard that matches all contents.
	// When customer uses config generated by the agent, the input log will have tag as containerName-firelens-taskID which
	// matches this. Customers can also generate logs with their own config and specify the tag to start with containerName-firelens
	// to match this.
	fluentTagOutputFormat = "%s-firelens%s"

	// matchAnyWildcardFluentd is the wildcard to match arbitrary content for fluentd.
	matchAnyWildcardFluentd = "**"
	// matchAnyWildcardFluentd is the wildcard to match arbitrary content for fluentbit.
	matchAnyWildcardFluentbit = "*"

	// inputBindOptionFluentd is the key for specifying host for fluentd for tcp.
	inputBindOptionFluentd = "bind"

	// inputAWSVPCBindValue is the value for specifying host on Windows this always binds to 0.0.0.0
	inputBindValue = "0.0.0.0"

	// inputPortOptionFluentd is the key for specifying port for fluentd for tcp.
	inputPortOptionFluentd = "port"

	// inputPortValue is the value for specifying port for fluentd for tcp.
	inputPortValue = "24224"

	// inputListenOptionFluentbit is the key for the log option that specifies host for fluentbit.
	inputListenOptionFluentbit = "Listen"

	// inputPortOptionFluentbit is the key for the log option that specifies port for fluentbit.
	inputPortOptionFluentbit = "Port"

	// bridgeNetworkMode specifies bridge type mode for a task
	bridgeNetworkMode = "bridge"

	// specifies awsvpc type mode for a task
	awsvpcNetworkMode = "awsvpc"
)

// generateConfig generates a FluentConfig object that contains all necessary information to construct
// a fluentd or fluentbit config file for a firelens container.
func (firelens *FirelensResource) generateConfig() (generator.FluentConfig, error) {
	config := generator.New()

	// Specify log stream input of tcp socket kind that can be used for communication between the Firelens
	// container and other containers.
	var inputMap map[string]string
	var inputName, matchAnyWildcard string
	if firelens.firelensConfigType == FirelensConfigTypeFluentd {
		inputMap = map[string]string{
			inputPortOptionFluentd: inputPortValue,
			inputBindOptionFluentd: inputBindValue,
		}
		inputName = inputNameForward
		matchAnyWildcard = matchAnyWildcardFluentd
	} else {
		inputName = inputNameForward
		matchAnyWildcard = matchAnyWildcardFluentbit
		inputMap = map[string]string{
			inputPortOptionFluentbit:   inputPortValue,
			inputListenOptionFluentbit: inputBindValue,
		}
	}
	config.AddInput(inputName, "", inputMap)

	if firelens.ecsMetadataEnabled {
		// Add ecs metadata fields to the log stream.
		config.AddFieldToRecord("ecs_cluster", firelens.cluster, matchAnyWildcard).
			AddFieldToRecord("ecs_task_arn", firelens.taskARN, matchAnyWildcard).
			AddFieldToRecord("ecs_task_definition", firelens.taskDefinition, matchAnyWildcard)
		if firelens.ec2InstanceID != "" {
			config.AddFieldToRecord("ec2_instance_id", firelens.ec2InstanceID, matchAnyWildcard)
		}
	}

	// Specify log stream output. Each container that uses the firelens container to stream logs
	// may have its own output section with options, constructed from container's log options.
	for containerName, logOptions := range firelens.containerToLogOptions {
		tag := fmt.Sprintf(fluentTagOutputFormat, containerName, matchAnyWildcard) // Each output section is distinguished by a tag specific to a container.
		newConfig, err := addOutputSection(tag, firelens.firelensConfigType, logOptions, config)
		if err != nil {
			return nil, fmt.Errorf("unable to apply log options of container %s to firelens config: %v", containerName, err)
		}
		config = newConfig
	}

	// Include external config file if specified.
	if firelens.externalConfigType == ExternalConfigTypeFile {
		config.AddExternalConfig(firelens.externalConfigValue, generator.AfterFilters)
	} else if firelens.externalConfigType == ExternalConfigTypeS3 {
		var s3ConfPath string
		if firelens.firelensConfigType == FirelensConfigTypeFluentd {
			s3ConfPath = S3ConfigPathFluentd
		} else {
			s3ConfPath = S3ConfigPathFluentbit
		}
		config.AddExternalConfig(s3ConfPath, generator.AfterFilters)
	}
	seelog.Infof("Included external firelens config file at: %s", firelens.externalConfigValue)

	return config, nil
}
