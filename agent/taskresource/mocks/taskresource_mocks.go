// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/taskresource (interfaces: TaskResource)

package mock_taskresource

import (
	time "time"

	taskresource "github.com/aws/amazon-ecs-agent/agent/taskresource"
	gomock "github.com/golang/mock/gomock"
)

// Mock of TaskResource interface
type MockTaskResource struct {
	ctrl     *gomock.Controller
	recorder *_MockTaskResourceRecorder
}

// Recorder for MockTaskResource (not exported)
type _MockTaskResourceRecorder struct {
	mock *MockTaskResource
}

func NewMockTaskResource(ctrl *gomock.Controller) *MockTaskResource {
	mock := &MockTaskResource{ctrl: ctrl}
	mock.recorder = &_MockTaskResourceRecorder{mock}
	return mock
}

func (_m *MockTaskResource) EXPECT() *_MockTaskResourceRecorder {
	return _m.recorder
}

func (_m *MockTaskResource) Cleanup() error {
	ret := _m.ctrl.Call(_m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) Cleanup() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cleanup")
}

func (_m *MockTaskResource) Create() error {
	ret := _m.ctrl.Call(_m, "Create")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) Create() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create")
}

func (_m *MockTaskResource) GetCreatedAt() time.Time {
	ret := _m.ctrl.Call(_m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) GetCreatedAt() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCreatedAt")
}

func (_m *MockTaskResource) GetDesiredStatus() taskresource.ResourceStatus {
	ret := _m.ctrl.Call(_m, "GetDesiredStatus")
	ret0, _ := ret[0].(taskresource.ResourceStatus)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) GetDesiredStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDesiredStatus")
}

func (_m *MockTaskResource) GetKnownStatus() taskresource.ResourceStatus {
	ret := _m.ctrl.Call(_m, "GetKnownStatus")
	ret0, _ := ret[0].(taskresource.ResourceStatus)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) GetKnownStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKnownStatus")
}

func (_m *MockTaskResource) GetName() string {
	ret := _m.ctrl.Call(_m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) GetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetName")
}

func (_m *MockTaskResource) MarshalJSON() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskResourceRecorder) MarshalJSON() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarshalJSON")
}

func (_m *MockTaskResource) SetCreatedAt(_param0 time.Time) {
	_m.ctrl.Call(_m, "SetCreatedAt", _param0)
}

func (_mr *_MockTaskResourceRecorder) SetCreatedAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCreatedAt", arg0)
}

func (_m *MockTaskResource) SetDesiredStatus(_param0 taskresource.ResourceStatus) {
	_m.ctrl.Call(_m, "SetDesiredStatus", _param0)
}

func (_mr *_MockTaskResourceRecorder) SetDesiredStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDesiredStatus", arg0)
}

func (_m *MockTaskResource) SetKnownStatus(_param0 taskresource.ResourceStatus) {
	_m.ctrl.Call(_m, "SetKnownStatus", _param0)
}

func (_mr *_MockTaskResourceRecorder) SetKnownStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKnownStatus", arg0)
}

func (_m *MockTaskResource) UnmarshalJSON(_param0 []byte) error {
	ret := _m.ctrl.Call(_m, "UnmarshalJSON", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskResourceRecorder) UnmarshalJSON(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmarshalJSON", arg0)
}
