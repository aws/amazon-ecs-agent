// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/engine/dockerstate (interfaces: TaskEngineState)

// Package mock_dockerstate is a generated GoMock package.
package mock_dockerstate

import (
	reflect "reflect"

	api "github.com/aws/amazon-ecs-agent/agent/api"
	image "github.com/aws/amazon-ecs-agent/agent/engine/image"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskEngineState is a mock of TaskEngineState interface
type MockTaskEngineState struct {
	ctrl     *gomock.Controller
	recorder *MockTaskEngineStateMockRecorder
}

// MockTaskEngineStateMockRecorder is the mock recorder for MockTaskEngineState
type MockTaskEngineStateMockRecorder struct {
	mock *MockTaskEngineState
}

// NewMockTaskEngineState creates a new mock instance
func NewMockTaskEngineState(ctrl *gomock.Controller) *MockTaskEngineState {
	mock := &MockTaskEngineState{ctrl: ctrl}
	mock.recorder = &MockTaskEngineStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskEngineState) EXPECT() *MockTaskEngineStateMockRecorder {
	return m.recorder
}

// AddContainer mocks base method
func (m *MockTaskEngineState) AddContainer(arg0 *api.DockerContainer, arg1 *api.Task) {
	m.ctrl.Call(m, "AddContainer", arg0, arg1)
}

// AddContainer indicates an expected call of AddContainer
func (mr *MockTaskEngineStateMockRecorder) AddContainer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockTaskEngineState)(nil).AddContainer), arg0, arg1)
}

// AddENIAttachment mocks base method
func (m *MockTaskEngineState) AddENIAttachment(arg0 *api.ENIAttachment) {
	m.ctrl.Call(m, "AddENIAttachment", arg0)
}

// AddENIAttachment indicates an expected call of AddENIAttachment
func (mr *MockTaskEngineStateMockRecorder) AddENIAttachment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddENIAttachment", reflect.TypeOf((*MockTaskEngineState)(nil).AddENIAttachment), arg0)
}

// AddImageState mocks base method
func (m *MockTaskEngineState) AddImageState(arg0 *image.ImageState) {
	m.ctrl.Call(m, "AddImageState", arg0)
}

// AddImageState indicates an expected call of AddImageState
func (mr *MockTaskEngineStateMockRecorder) AddImageState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageState", reflect.TypeOf((*MockTaskEngineState)(nil).AddImageState), arg0)
}

// AddTask mocks base method
func (m *MockTaskEngineState) AddTask(arg0 *api.Task) {
	m.ctrl.Call(m, "AddTask", arg0)
}

// AddTask indicates an expected call of AddTask
func (mr *MockTaskEngineStateMockRecorder) AddTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskEngineState)(nil).AddTask), arg0)
}

// AddTaskIPAddress mocks base method
func (m *MockTaskEngineState) AddTaskIPAddress(arg0, arg1 string) {
	m.ctrl.Call(m, "AddTaskIPAddress", arg0, arg1)
}

// AddTaskIPAddress indicates an expected call of AddTaskIPAddress
func (mr *MockTaskEngineStateMockRecorder) AddTaskIPAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskIPAddress", reflect.TypeOf((*MockTaskEngineState)(nil).AddTaskIPAddress), arg0, arg1)
}

// AllImageStates mocks base method
func (m *MockTaskEngineState) AllImageStates() []*image.ImageState {
	ret := m.ctrl.Call(m, "AllImageStates")
	ret0, _ := ret[0].([]*image.ImageState)
	return ret0
}

// AllImageStates indicates an expected call of AllImageStates
func (mr *MockTaskEngineStateMockRecorder) AllImageStates() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllImageStates", reflect.TypeOf((*MockTaskEngineState)(nil).AllImageStates))
}

// AllTasks mocks base method
func (m *MockTaskEngineState) AllTasks() []*api.Task {
	ret := m.ctrl.Call(m, "AllTasks")
	ret0, _ := ret[0].([]*api.Task)
	return ret0
}

// AllTasks indicates an expected call of AllTasks
func (mr *MockTaskEngineStateMockRecorder) AllTasks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTasks", reflect.TypeOf((*MockTaskEngineState)(nil).AllTasks))
}

// ContainerByID mocks base method
func (m *MockTaskEngineState) ContainerByID(arg0 string) (*api.DockerContainer, bool) {
	ret := m.ctrl.Call(m, "ContainerByID", arg0)
	ret0, _ := ret[0].(*api.DockerContainer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ContainerByID indicates an expected call of ContainerByID
func (mr *MockTaskEngineStateMockRecorder) ContainerByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerByID", reflect.TypeOf((*MockTaskEngineState)(nil).ContainerByID), arg0)
}

// ContainerMapByArn mocks base method
func (m *MockTaskEngineState) ContainerMapByArn(arg0 string) (map[string]*api.DockerContainer, bool) {
	ret := m.ctrl.Call(m, "ContainerMapByArn", arg0)
	ret0, _ := ret[0].(map[string]*api.DockerContainer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ContainerMapByArn indicates an expected call of ContainerMapByArn
func (mr *MockTaskEngineStateMockRecorder) ContainerMapByArn(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerMapByArn", reflect.TypeOf((*MockTaskEngineState)(nil).ContainerMapByArn), arg0)
}

// ENIByMac mocks base method
func (m *MockTaskEngineState) ENIByMac(arg0 string) (*api.ENIAttachment, bool) {
	ret := m.ctrl.Call(m, "ENIByMac", arg0)
	ret0, _ := ret[0].(*api.ENIAttachment)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ENIByMac indicates an expected call of ENIByMac
func (mr *MockTaskEngineStateMockRecorder) ENIByMac(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ENIByMac", reflect.TypeOf((*MockTaskEngineState)(nil).ENIByMac), arg0)
}

// GetAllContainerIDs mocks base method
func (m *MockTaskEngineState) GetAllContainerIDs() []string {
	ret := m.ctrl.Call(m, "GetAllContainerIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllContainerIDs indicates an expected call of GetAllContainerIDs
func (mr *MockTaskEngineStateMockRecorder) GetAllContainerIDs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContainerIDs", reflect.TypeOf((*MockTaskEngineState)(nil).GetAllContainerIDs))
}

// GetTaskByIPAddress mocks base method
func (m *MockTaskEngineState) GetTaskByIPAddress(arg0 string) (string, bool) {
	ret := m.ctrl.Call(m, "GetTaskByIPAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTaskByIPAddress indicates an expected call of GetTaskByIPAddress
func (mr *MockTaskEngineStateMockRecorder) GetTaskByIPAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByIPAddress", reflect.TypeOf((*MockTaskEngineState)(nil).GetTaskByIPAddress), arg0)
}

// MarshalJSON mocks base method
func (m *MockTaskEngineState) MarshalJSON() ([]byte, error) {
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockTaskEngineStateMockRecorder) MarshalJSON() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockTaskEngineState)(nil).MarshalJSON))
}

// RemoveENIAttachment mocks base method
func (m *MockTaskEngineState) RemoveENIAttachment(arg0 string) {
	m.ctrl.Call(m, "RemoveENIAttachment", arg0)
}

// RemoveENIAttachment indicates an expected call of RemoveENIAttachment
func (mr *MockTaskEngineStateMockRecorder) RemoveENIAttachment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveENIAttachment", reflect.TypeOf((*MockTaskEngineState)(nil).RemoveENIAttachment), arg0)
}

// RemoveImageState mocks base method
func (m *MockTaskEngineState) RemoveImageState(arg0 *image.ImageState) {
	m.ctrl.Call(m, "RemoveImageState", arg0)
}

// RemoveImageState indicates an expected call of RemoveImageState
func (mr *MockTaskEngineStateMockRecorder) RemoveImageState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImageState", reflect.TypeOf((*MockTaskEngineState)(nil).RemoveImageState), arg0)
}

// RemoveTask mocks base method
func (m *MockTaskEngineState) RemoveTask(arg0 *api.Task) {
	m.ctrl.Call(m, "RemoveTask", arg0)
}

// RemoveTask indicates an expected call of RemoveTask
func (mr *MockTaskEngineStateMockRecorder) RemoveTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTask", reflect.TypeOf((*MockTaskEngineState)(nil).RemoveTask), arg0)
}

// Reset mocks base method
func (m *MockTaskEngineState) Reset() {
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset
func (mr *MockTaskEngineStateMockRecorder) Reset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTaskEngineState)(nil).Reset))
}

// TaskByArn mocks base method
func (m *MockTaskEngineState) TaskByArn(arg0 string) (*api.Task, bool) {
	ret := m.ctrl.Call(m, "TaskByArn", arg0)
	ret0, _ := ret[0].(*api.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TaskByArn indicates an expected call of TaskByArn
func (mr *MockTaskEngineStateMockRecorder) TaskByArn(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskByArn", reflect.TypeOf((*MockTaskEngineState)(nil).TaskByArn), arg0)
}

// TaskByID mocks base method
func (m *MockTaskEngineState) TaskByID(arg0 string) (*api.Task, bool) {
	ret := m.ctrl.Call(m, "TaskByID", arg0)
	ret0, _ := ret[0].(*api.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TaskByID indicates an expected call of TaskByID
func (mr *MockTaskEngineStateMockRecorder) TaskByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskByID", reflect.TypeOf((*MockTaskEngineState)(nil).TaskByID), arg0)
}

// TaskByShortID mocks base method
func (m *MockTaskEngineState) TaskByShortID(arg0 string) ([]*api.Task, bool) {
	ret := m.ctrl.Call(m, "TaskByShortID", arg0)
	ret0, _ := ret[0].([]*api.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TaskByShortID indicates an expected call of TaskByShortID
func (mr *MockTaskEngineStateMockRecorder) TaskByShortID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskByShortID", reflect.TypeOf((*MockTaskEngineState)(nil).TaskByShortID), arg0)
}

// UnmarshalJSON mocks base method
func (m *MockTaskEngineState) UnmarshalJSON(arg0 []byte) error {
	ret := m.ctrl.Call(m, "UnmarshalJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON
func (mr *MockTaskEngineStateMockRecorder) UnmarshalJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockTaskEngineState)(nil).UnmarshalJSON), arg0)
}
