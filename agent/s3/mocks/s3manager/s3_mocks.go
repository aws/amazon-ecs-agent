// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/s3 (interfaces: S3ManagerClient)

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	io "io"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
)

// MockS3ManagerClient is a mock of S3ManagerClient interface.
type MockS3ManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockS3ManagerClientMockRecorder
}

// MockS3ManagerClientMockRecorder is the mock recorder for MockS3ManagerClient.
type MockS3ManagerClientMockRecorder struct {
	mock *MockS3ManagerClient
}

// NewMockS3ManagerClient creates a new mock instance.
func NewMockS3ManagerClient(ctrl *gomock.Controller) *MockS3ManagerClient {
	mock := &MockS3ManagerClient{ctrl: ctrl}
	mock.recorder = &MockS3ManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3ManagerClient) EXPECT() *MockS3ManagerClientMockRecorder {
	return m.recorder
}

// DownloadWithContext mocks base method.
func (m *MockS3ManagerClient) DownloadWithContext(arg0 context.Context, arg1 io.WriterAt, arg2 *s3.GetObjectInput, arg3 ...func(*s3manager.Downloader)) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadWithContext", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadWithContext indicates an expected call of DownloadWithContext.
func (mr *MockS3ManagerClientMockRecorder) DownloadWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWithContext", reflect.TypeOf((*MockS3ManagerClient)(nil).DownloadWithContext), varargs...)
}
