// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/utils/bufiowrapper (interfaces: Bufio,Scanner)

// Package mock_bufiowrapper is a generated GoMock package.
package mock_bufiowrapper

import (
	io "io"
	reflect "reflect"

	bufiowrapper "github.com/aws/amazon-ecs-agent/agent/utils/bufiowrapper"
	gomock "github.com/golang/mock/gomock"
)

// MockBufio is a mock of Bufio interface
type MockBufio struct {
	ctrl     *gomock.Controller
	recorder *MockBufioMockRecorder
}

// MockBufioMockRecorder is the mock recorder for MockBufio
type MockBufioMockRecorder struct {
	mock *MockBufio
}

// NewMockBufio creates a new mock instance
func NewMockBufio(ctrl *gomock.Controller) *MockBufio {
	mock := &MockBufio{ctrl: ctrl}
	mock.recorder = &MockBufioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBufio) EXPECT() *MockBufioMockRecorder {
	return m.recorder
}

// NewScanner mocks base method
func (m *MockBufio) NewScanner(arg0 io.Reader) bufiowrapper.Scanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewScanner", arg0)
	ret0, _ := ret[0].(bufiowrapper.Scanner)
	return ret0
}

// NewScanner indicates an expected call of NewScanner
func (mr *MockBufioMockRecorder) NewScanner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewScanner", reflect.TypeOf((*MockBufio)(nil).NewScanner), arg0)
}

// MockScanner is a mock of Scanner interface
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Err mocks base method
func (m *MockScanner) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockScannerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockScanner)(nil).Err))
}

// Scan mocks base method
func (m *MockScanner) Scan() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockScannerMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan))
}

// Text mocks base method
func (m *MockScanner) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text
func (mr *MockScannerMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockScanner)(nil).Text))
}
