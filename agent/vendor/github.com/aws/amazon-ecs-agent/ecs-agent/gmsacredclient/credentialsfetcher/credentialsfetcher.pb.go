//command to generate gRPC code
//protoc --go_out=. --go_opt=paths=source_relative \
//--go-grpc_out=. --go-grpc_opt=paths=source_relative credentialsfetcher/credentialsfetcher.proto
// This will generate credentialsfetcher/credentialsfetcher.pb.go and
//credentialsfetcher/credentialsfetcher_grpc.pb.go files

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: credentialsfetcher/credentialsfetcher.proto

package credentialsfetcher

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type KerberosArnLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredspecArns    []string `protobuf:"bytes,1,rep,name=credspec_arns,json=credspecArns,proto3" json:"credspec_arns,omitempty"`
	AccessKeyId     string   `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string   `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	SessionToken    string   `protobuf:"bytes,4,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Region          string   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *KerberosArnLeaseRequest) Reset() {
	*x = KerberosArnLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KerberosArnLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KerberosArnLeaseRequest) ProtoMessage() {}

func (x *KerberosArnLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KerberosArnLeaseRequest.ProtoReflect.Descriptor instead.
func (*KerberosArnLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{2}
}

func (x *KerberosArnLeaseRequest) GetCredspecArns() []string {
	if x != nil {
		return x.CredspecArns
	}
	return nil
}

func (x *KerberosArnLeaseRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *KerberosArnLeaseRequest) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *KerberosArnLeaseRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *KerberosArnLeaseRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type RenewKerberosArnLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId     string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	SessionToken    string `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *RenewKerberosArnLeaseRequest) Reset() {
	*x = RenewKerberosArnLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewKerberosArnLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewKerberosArnLeaseRequest) ProtoMessage() {}

func (x *RenewKerberosArnLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewKerberosArnLeaseRequest.ProtoReflect.Descriptor instead.
func (*RenewKerberosArnLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{3}
}

func (x *RenewKerberosArnLeaseRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *RenewKerberosArnLeaseRequest) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *RenewKerberosArnLeaseRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *RenewKerberosArnLeaseRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type CreateKerberosArnLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId              string                       `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	KrbTicketResponseMap []*KerberosTicketArnResponse `protobuf:"bytes,2,rep,name=krb_ticket_response_map,json=krbTicketResponseMap,proto3" json:"krb_ticket_response_map,omitempty"`
}

func (x *CreateKerberosArnLeaseResponse) Reset() {
	*x = CreateKerberosArnLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKerberosArnLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKerberosArnLeaseResponse) ProtoMessage() {}

func (x *CreateKerberosArnLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKerberosArnLeaseResponse.ProtoReflect.Descriptor instead.
func (*CreateKerberosArnLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{4}
}

func (x *CreateKerberosArnLeaseResponse) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *CreateKerberosArnLeaseResponse) GetKrbTicketResponseMap() []*KerberosTicketArnResponse {
	if x != nil {
		return x.KrbTicketResponseMap
	}
	return nil
}

type RenewKerberosArnLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RenewKerberosArnLeaseResponse) Reset() {
	*x = RenewKerberosArnLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewKerberosArnLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewKerberosArnLeaseResponse) ProtoMessage() {}

func (x *RenewKerberosArnLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewKerberosArnLeaseResponse.ProtoReflect.Descriptor instead.
func (*RenewKerberosArnLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{5}
}

func (x *RenewKerberosArnLeaseResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type KerberosTicketArnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredspecArns             string `protobuf:"bytes,1,opt,name=credspec_arns,json=credspecArns,proto3" json:"credspec_arns,omitempty"`
	CreatedKerberosFilePaths string `protobuf:"bytes,2,opt,name=created_kerberos_file_paths,json=createdKerberosFilePaths,proto3" json:"created_kerberos_file_paths,omitempty"`
}

func (x *KerberosTicketArnResponse) Reset() {
	*x = KerberosTicketArnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KerberosTicketArnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KerberosTicketArnResponse) ProtoMessage() {}

func (x *KerberosTicketArnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KerberosTicketArnResponse.ProtoReflect.Descriptor instead.
func (*KerberosTicketArnResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{6}
}

func (x *KerberosTicketArnResponse) GetCredspecArns() string {
	if x != nil {
		return x.CredspecArns
	}
	return ""
}

func (x *KerberosTicketArnResponse) GetCreatedKerberosFilePaths() string {
	if x != nil {
		return x.CreatedKerberosFilePaths
	}
	return ""
}

type CreateKerberosLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredspecContents []string `protobuf:"bytes,1,rep,name=credspec_contents,json=credspecContents,proto3" json:"credspec_contents,omitempty"`
}

func (x *CreateKerberosLeaseRequest) Reset() {
	*x = CreateKerberosLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKerberosLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKerberosLeaseRequest) ProtoMessage() {}

func (x *CreateKerberosLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKerberosLeaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKerberosLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{7}
}

func (x *CreateKerberosLeaseRequest) GetCredspecContents() []string {
	if x != nil {
		return x.CredspecContents
	}
	return nil
}

type CreateKerberosLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId                  string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	CreatedKerberosFilePaths []string `protobuf:"bytes,2,rep,name=created_kerberos_file_paths,json=createdKerberosFilePaths,proto3" json:"created_kerberos_file_paths,omitempty"`
}

func (x *CreateKerberosLeaseResponse) Reset() {
	*x = CreateKerberosLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKerberosLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKerberosLeaseResponse) ProtoMessage() {}

func (x *CreateKerberosLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKerberosLeaseResponse.ProtoReflect.Descriptor instead.
func (*CreateKerberosLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{8}
}

func (x *CreateKerberosLeaseResponse) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *CreateKerberosLeaseResponse) GetCreatedKerberosFilePaths() []string {
	if x != nil {
		return x.CreatedKerberosFilePaths
	}
	return nil
}

type CreateNonDomainJoinedKerberosLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredspecContents []string `protobuf:"bytes,1,rep,name=credspec_contents,json=credspecContents,proto3" json:"credspec_contents,omitempty"`
	Username         string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password         string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Domain           string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) Reset() {
	*x = CreateNonDomainJoinedKerberosLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonDomainJoinedKerberosLeaseRequest) ProtoMessage() {}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonDomainJoinedKerberosLeaseRequest.ProtoReflect.Descriptor instead.
func (*CreateNonDomainJoinedKerberosLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) GetCredspecContents() []string {
	if x != nil {
		return x.CredspecContents
	}
	return nil
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateNonDomainJoinedKerberosLeaseRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type CreateNonDomainJoinedKerberosLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId                  string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	CreatedKerberosFilePaths []string `protobuf:"bytes,2,rep,name=created_kerberos_file_paths,json=createdKerberosFilePaths,proto3" json:"created_kerberos_file_paths,omitempty"`
}

func (x *CreateNonDomainJoinedKerberosLeaseResponse) Reset() {
	*x = CreateNonDomainJoinedKerberosLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonDomainJoinedKerberosLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonDomainJoinedKerberosLeaseResponse) ProtoMessage() {}

func (x *CreateNonDomainJoinedKerberosLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonDomainJoinedKerberosLeaseResponse.ProtoReflect.Descriptor instead.
func (*CreateNonDomainJoinedKerberosLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{10}
}

func (x *CreateNonDomainJoinedKerberosLeaseResponse) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *CreateNonDomainJoinedKerberosLeaseResponse) GetCreatedKerberosFilePaths() []string {
	if x != nil {
		return x.CreatedKerberosFilePaths
	}
	return nil
}

type RenewNonDomainJoinedKerberosLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Domain   string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) Reset() {
	*x = RenewNonDomainJoinedKerberosLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewNonDomainJoinedKerberosLeaseRequest) ProtoMessage() {}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewNonDomainJoinedKerberosLeaseRequest.ProtoReflect.Descriptor instead.
func (*RenewNonDomainJoinedKerberosLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{11}
}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RenewNonDomainJoinedKerberosLeaseRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type RenewNonDomainJoinedKerberosLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenewedKerberosFilePaths []string `protobuf:"bytes,1,rep,name=renewed_kerberos_file_paths,json=renewedKerberosFilePaths,proto3" json:"renewed_kerberos_file_paths,omitempty"`
}

func (x *RenewNonDomainJoinedKerberosLeaseResponse) Reset() {
	*x = RenewNonDomainJoinedKerberosLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewNonDomainJoinedKerberosLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewNonDomainJoinedKerberosLeaseResponse) ProtoMessage() {}

func (x *RenewNonDomainJoinedKerberosLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewNonDomainJoinedKerberosLeaseResponse.ProtoReflect.Descriptor instead.
func (*RenewNonDomainJoinedKerberosLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{12}
}

func (x *RenewNonDomainJoinedKerberosLeaseResponse) GetRenewedKerberosFilePaths() []string {
	if x != nil {
		return x.RenewedKerberosFilePaths
	}
	return nil
}

type DeleteKerberosLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *DeleteKerberosLeaseRequest) Reset() {
	*x = DeleteKerberosLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKerberosLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKerberosLeaseRequest) ProtoMessage() {}

func (x *DeleteKerberosLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKerberosLeaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKerberosLeaseRequest) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteKerberosLeaseRequest) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type DeleteKerberosLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId                  string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	DeletedKerberosFilePaths []string `protobuf:"bytes,2,rep,name=deleted_kerberos_file_paths,json=deletedKerberosFilePaths,proto3" json:"deleted_kerberos_file_paths,omitempty"`
}

func (x *DeleteKerberosLeaseResponse) Reset() {
	*x = DeleteKerberosLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKerberosLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKerberosLeaseResponse) ProtoMessage() {}

func (x *DeleteKerberosLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialsfetcher_credentialsfetcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKerberosLeaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteKerberosLeaseResponse) Descriptor() ([]byte, []int) {
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteKerberosLeaseResponse) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *DeleteKerberosLeaseResponse) GetDeletedKerberosFilePaths() []string {
	if x != nil {
		return x.DeletedKerberosFilePaths
	}
	return nil
}

var File_credentialsfetcher_credentialsfetcher_proto protoreflect.FileDescriptor

var file_credentialsfetcher_credentialsfetcher_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x22, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x2d, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x17, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x41, 0x72, 0x6e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x73, 0x70, 0x65, 0x63, 0x41, 0x72, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xab,
	0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73,
	0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x41,
	0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x6b, 0x72,
	0x62, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x6b, 0x72, 0x62, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70,
	0x22, 0x37, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a, 0x19, 0x4b, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x6f, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x73, 0x70, 0x65, 0x63, 0x41, 0x72, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x49, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x72, 0x62, 0x65,
	0x72, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x6f, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x22, 0x7a, 0x0a, 0x28, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x6a,
	0x0a, 0x29, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x37, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65,
	0x72, 0x6f, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0xa4, 0x07, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa0, 0x01, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x3d, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65,
	0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65,
	0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x41, 0x72, 0x6e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x6f, 0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4b, 0x65,
	0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x30,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f,
	0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x72, 0x62, 0x65,
	0x72, 0x6f, 0x73, 0x41, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x6d, 0x73, 0x61, 0x63, 0x72, 0x65, 0x64, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credentialsfetcher_credentialsfetcher_proto_rawDescOnce sync.Once
	file_credentialsfetcher_credentialsfetcher_proto_rawDescData = file_credentialsfetcher_credentialsfetcher_proto_rawDesc
)

func file_credentialsfetcher_credentialsfetcher_proto_rawDescGZIP() []byte {
	file_credentialsfetcher_credentialsfetcher_proto_rawDescOnce.Do(func() {
		file_credentialsfetcher_credentialsfetcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_credentialsfetcher_credentialsfetcher_proto_rawDescData)
	})
	return file_credentialsfetcher_credentialsfetcher_proto_rawDescData
}

var file_credentialsfetcher_credentialsfetcher_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_credentialsfetcher_credentialsfetcher_proto_goTypes = []interface{}{
	(*HealthCheckRequest)(nil),                         // 0: credentialsfetcher.HealthCheckRequest
	(*HealthCheckResponse)(nil),                        // 1: credentialsfetcher.HealthCheckResponse
	(*KerberosArnLeaseRequest)(nil),                    // 2: credentialsfetcher.KerberosArnLeaseRequest
	(*RenewKerberosArnLeaseRequest)(nil),               // 3: credentialsfetcher.RenewKerberosArnLeaseRequest
	(*CreateKerberosArnLeaseResponse)(nil),             // 4: credentialsfetcher.CreateKerberosArnLeaseResponse
	(*RenewKerberosArnLeaseResponse)(nil),              // 5: credentialsfetcher.RenewKerberosArnLeaseResponse
	(*KerberosTicketArnResponse)(nil),                  // 6: credentialsfetcher.KerberosTicketArnResponse
	(*CreateKerberosLeaseRequest)(nil),                 // 7: credentialsfetcher.CreateKerberosLeaseRequest
	(*CreateKerberosLeaseResponse)(nil),                // 8: credentialsfetcher.CreateKerberosLeaseResponse
	(*CreateNonDomainJoinedKerberosLeaseRequest)(nil),  // 9: credentialsfetcher.CreateNonDomainJoinedKerberosLeaseRequest
	(*CreateNonDomainJoinedKerberosLeaseResponse)(nil), // 10: credentialsfetcher.CreateNonDomainJoinedKerberosLeaseResponse
	(*RenewNonDomainJoinedKerberosLeaseRequest)(nil),   // 11: credentialsfetcher.RenewNonDomainJoinedKerberosLeaseRequest
	(*RenewNonDomainJoinedKerberosLeaseResponse)(nil),  // 12: credentialsfetcher.RenewNonDomainJoinedKerberosLeaseResponse
	(*DeleteKerberosLeaseRequest)(nil),                 // 13: credentialsfetcher.DeleteKerberosLeaseRequest
	(*DeleteKerberosLeaseResponse)(nil),                // 14: credentialsfetcher.DeleteKerberosLeaseResponse
}
var file_credentialsfetcher_credentialsfetcher_proto_depIdxs = []int32{
	6,  // 0: credentialsfetcher.CreateKerberosArnLeaseResponse.krb_ticket_response_map:type_name -> credentialsfetcher.KerberosTicketArnResponse
	7,  // 1: credentialsfetcher.CredentialsFetcherService.AddKerberosLease:input_type -> credentialsfetcher.CreateKerberosLeaseRequest
	9,  // 2: credentialsfetcher.CredentialsFetcherService.AddNonDomainJoinedKerberosLease:input_type -> credentialsfetcher.CreateNonDomainJoinedKerberosLeaseRequest
	11, // 3: credentialsfetcher.CredentialsFetcherService.RenewNonDomainJoinedKerberosLease:input_type -> credentialsfetcher.RenewNonDomainJoinedKerberosLeaseRequest
	13, // 4: credentialsfetcher.CredentialsFetcherService.DeleteKerberosLease:input_type -> credentialsfetcher.DeleteKerberosLeaseRequest
	0,  // 5: credentialsfetcher.CredentialsFetcherService.HealthCheck:input_type -> credentialsfetcher.HealthCheckRequest
	2,  // 6: credentialsfetcher.CredentialsFetcherService.AddKerberosArnLease:input_type -> credentialsfetcher.KerberosArnLeaseRequest
	3,  // 7: credentialsfetcher.CredentialsFetcherService.RenewKerberosArnLease:input_type -> credentialsfetcher.RenewKerberosArnLeaseRequest
	8,  // 8: credentialsfetcher.CredentialsFetcherService.AddKerberosLease:output_type -> credentialsfetcher.CreateKerberosLeaseResponse
	10, // 9: credentialsfetcher.CredentialsFetcherService.AddNonDomainJoinedKerberosLease:output_type -> credentialsfetcher.CreateNonDomainJoinedKerberosLeaseResponse
	12, // 10: credentialsfetcher.CredentialsFetcherService.RenewNonDomainJoinedKerberosLease:output_type -> credentialsfetcher.RenewNonDomainJoinedKerberosLeaseResponse
	14, // 11: credentialsfetcher.CredentialsFetcherService.DeleteKerberosLease:output_type -> credentialsfetcher.DeleteKerberosLeaseResponse
	1,  // 12: credentialsfetcher.CredentialsFetcherService.HealthCheck:output_type -> credentialsfetcher.HealthCheckResponse
	4,  // 13: credentialsfetcher.CredentialsFetcherService.AddKerberosArnLease:output_type -> credentialsfetcher.CreateKerberosArnLeaseResponse
	5,  // 14: credentialsfetcher.CredentialsFetcherService.RenewKerberosArnLease:output_type -> credentialsfetcher.RenewKerberosArnLeaseResponse
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_credentialsfetcher_credentialsfetcher_proto_init() }

//gocyclo:ignore
func file_credentialsfetcher_credentialsfetcher_proto_init() {
	if File_credentialsfetcher_credentialsfetcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KerberosArnLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewKerberosArnLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKerberosArnLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewKerberosArnLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KerberosTicketArnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKerberosLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKerberosLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonDomainJoinedKerberosLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonDomainJoinedKerberosLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewNonDomainJoinedKerberosLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewNonDomainJoinedKerberosLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKerberosLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialsfetcher_credentialsfetcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKerberosLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credentialsfetcher_credentialsfetcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_credentialsfetcher_credentialsfetcher_proto_goTypes,
		DependencyIndexes: file_credentialsfetcher_credentialsfetcher_proto_depIdxs,
		MessageInfos:      file_credentialsfetcher_credentialsfetcher_proto_msgTypes,
	}.Build()
	File_credentialsfetcher_credentialsfetcher_proto = out.File
	file_credentialsfetcher_credentialsfetcher_proto_rawDesc = nil
	file_credentialsfetcher_credentialsfetcher_proto_goTypes = nil
	file_credentialsfetcher_credentialsfetcher_proto_depIdxs = nil
}
