// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/resources (interfaces: Resource)

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	api "github.com/aws/amazon-ecs-agent/agent/api"
	config "github.com/aws/amazon-ecs-agent/agent/config"
	gomock "github.com/golang/mock/gomock"
)

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// ApplyConfigDependencies mocks base method
func (m *MockResource) ApplyConfigDependencies(arg0 *config.Config) {
	m.ctrl.Call(m, "ApplyConfigDependencies", arg0)
}

// ApplyConfigDependencies indicates an expected call of ApplyConfigDependencies
func (mr *MockResourceMockRecorder) ApplyConfigDependencies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfigDependencies", reflect.TypeOf((*MockResource)(nil).ApplyConfigDependencies), arg0)
}

// Cleanup mocks base method
func (m *MockResource) Cleanup(arg0 *api.Task) error {
	ret := m.ctrl.Call(m, "Cleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockResourceMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockResource)(nil).Cleanup), arg0)
}

// Init mocks base method
func (m *MockResource) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockResourceMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockResource)(nil).Init))
}

// Setup mocks base method
func (m *MockResource) Setup(arg0 *api.Task) error {
	ret := m.ctrl.Call(m, "Setup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup
func (mr *MockResourceMockRecorder) Setup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockResource)(nil).Setup), arg0)
}
