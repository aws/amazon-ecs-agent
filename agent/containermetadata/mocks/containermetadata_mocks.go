// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/containermetadata (interfaces: Manager,DockerMetadataClient)

package mock_containermetadata

import (
	time "time"

	go_dockerclient "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// Clean mocks base method
func (_m *MockManager) Clean(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Clean", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean
func (_mr *MockManagerMockRecorder) Clean(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clean", arg0)
}

// Create mocks base method
func (_m *MockManager) Create(_param0 *go_dockerclient.Config, _param1 *go_dockerclient.HostConfig, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (_mr *MockManagerMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1, arg2, arg3)
}

// SetContainerInstanceARN mocks base method
func (_m *MockManager) SetContainerInstanceARN(_param0 string) {
	_m.ctrl.Call(_m, "SetContainerInstanceARN", _param0)
}

// SetContainerInstanceARN indicates an expected call of SetContainerInstanceARN
func (_mr *MockManagerMockRecorder) SetContainerInstanceARN(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetContainerInstanceARN", arg0)
}

// Update mocks base method
func (_m *MockManager) Update(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockManagerMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1, arg2)
}

// MockDockerMetadataClient is a mock of DockerMetadataClient interface
type MockDockerMetadataClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerMetadataClientMockRecorder
}

// MockDockerMetadataClientMockRecorder is the mock recorder for MockDockerMetadataClient
type MockDockerMetadataClientMockRecorder struct {
	mock *MockDockerMetadataClient
}

// NewMockDockerMetadataClient creates a new mock instance
func NewMockDockerMetadataClient(ctrl *gomock.Controller) *MockDockerMetadataClient {
	mock := &MockDockerMetadataClient{ctrl: ctrl}
	mock.recorder = &MockDockerMetadataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDockerMetadataClient) EXPECT() *MockDockerMetadataClientMockRecorder {
	return _m.recorder
}

// InspectContainer mocks base method
func (_m *MockDockerMetadataClient) InspectContainer(_param0 string, _param1 time.Duration) (*go_dockerclient.Container, error) {
	ret := _m.ctrl.Call(_m, "InspectContainer", _param0, _param1)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectContainer indicates an expected call of InspectContainer
func (_mr *MockDockerMetadataClientMockRecorder) InspectContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InspectContainer", arg0, arg1)
}
