#!/bin/bash
# Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
# 	http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

# Run a local registry on the 'well known' port 51670 if it is not running.
# Also push images we will need to it.
set -e

REGISTRY_IMAGE="registry:2.7.0"

NGINX_IMAGE="nginx:1.15.8"

ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )
cd "${ROOT}"

REGISTRY_CONTAINER_NAME="test-ecs-registry"

echo "Removing $REGISTRY_CONTAINER_NAME"
# stop and remove the registry container. The script will not exit if the container is not running
docker stop "$REGISTRY_CONTAINER_NAME" || true && docker rm "$REGISTRY_CONTAINER_NAME" || true

echo "Running $REGISTRY_CONTAINER_NAME"
docker run -d --name="$REGISTRY_CONTAINER_NAME" -e SETTINGS_FLAVOR=local -p "127.0.0.1:51670:5000" "${REGISTRY_IMAGE}"

# Make sure our images are pushed to it
mirror_image() {
  docker pull $1
  mirror_local_image $@
}

mirror_local_image() {
  echo "Mirroring $1"
  docker tag $1 $2
  docker push $2
  docker rmi $2
}

for image in "amazon/amazon-ecs-netkitten" "amazon/amazon-ecs-volumes-test" "amazon/amazon-ecs-pid-namespace-test" "amazon/amazon-ecs-ipc-namespace-test" "amazon/squid" "amazon/awscli" "amazon/image-cleanup-test-image1" "amazon/image-cleanup-test-image2" "amazon/image-cleanup-test-image3" "amazon/fluentd" "amazon/amazon-ecs-agent-introspection-validator" "amazon/amazon-ecs-taskmetadata-validator" "amazon/amazon-ecs-v3-task-endpoint-validator" "amazon/amazon-ecs-container-metadata-file-validator" "amazon/amazon-ecs-elastic-inference-validator" "amazon/amazon-appmesh-plugin-validator"; do
  mirror_local_image "${image}:make" "127.0.0.1:51670/${image}:latest"
done


# Remove the tag so this image can be deleted successfully in the docker image cleanup integ tests
docker rmi amazon/image-cleanup-test-image1:make
docker rmi amazon/image-cleanup-test-image2:make
docker rmi amazon/image-cleanup-test-image3:make

BUSYBOX_IMAGE="busybox:1.29.3"
NGINX_IMAGE="nginx:1.15.8"
PYTHON2_IMAGE="python:2.7.15"
UBUNTU_IMAGE="ubuntu:16.04"

PARALLEL_PULL_FTS_BUSYBOX=${BUSYBOX_IMAGE}
PARALLEL_PULL_FTS_UBUNTU=${UBUNTU_IMAGE}
PARALLEL_PULL_FTS_NGINX=${NGINX_IMAGE}
PARALLEL_PULL_FTS_CONSUL="consul:1.3.0"
PARALLEL_PULL_FTS_DEBIAN="debian:stable"

BUILD_PLATFORM=$(uname -m)

if [[ "$BUILD_PLATFORM" == "aarch64" ]]; then
    PARALLEL_PULL_FTS_HTTPD="arm64v8/httpd:2.4"
else
    PARALLEL_PULL_FTS_HTTPD="httpd@sha256:0d817a924bed1a216f12a0f4947b5f8a2f173bd5a9cebfe1382d024287154c99"
fi

PARALLEL_PULL_FTS_CRUX="crux:3.0"
PARALLEL_PULL_FTS_REDIS="redis:4.0.13"
PARALLEL_PULL_FTS_REGISTRY=${REGISTRY_IMAGE}

mirror_image ${BUSYBOX_IMAGE} "127.0.0.1:51670/busybox:latest"
mirror_image ${NGINX_IMAGE} "127.0.0.1:51670/nginx:latest"
mirror_image ${PYTHON2_IMAGE} "127.0.0.1:51670/python:2"
mirror_image ${UBUNTU_IMAGE} "127.0.0.1:51670/ubuntu:latest"
mirror_image ${PARALLEL_PULL_FTS_BUSYBOX} "127.0.0.1:51670/busybox:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_UBUNTU} "127.0.0.1:51670/ubuntu:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_CONSUL} "127.0.0.1:51670/consul:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_DEBIAN} "127.0.0.1:51670/debian:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_HTTPD} "127.0.0.1:51670/httpd:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_CRUX} "127.0.0.1:51670/crux:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_NGINX} "127.0.0.1:51670/nginx:parallel-pull-fts"
mirror_image ${PARALLEL_PULL_FTS_REDIS} "127.0.0.1:51670/redis:parallel-pull-fts"
mirror_local_image ${PARALLEL_PULL_FTS_REGISTRY} "127.0.0.1:51670/registry:parallel-pull-fts"


# Now setup a v2 registry with auth... aka nginx with basic auth in front of it
REGISTRY_AUTH_CONTAINER_NAME="test-ecs-registry-auth"
status=$(docker inspect -f "{{ .State.Running }}" "${REGISTRY_AUTH_CONTAINER_NAME}") || true
if [[ "$status" == "false" ]]; then
  docker rm -f "${REGISTRY_AUTH_CONTAINER_NAME}"
fi

if [[ "$status" != "true" ]]; then
  docker run -d -p "127.0.0.1:51671:80" --link "${REGISTRY_CONTAINER_NAME}:registry" --name="${REGISTRY_AUTH_CONTAINER_NAME}" -v "${ROOT}/scripts/registry/nginx-auth:/etc/nginx" "${NGINX_IMAGE}"
fi

